package com.thingtrack.konekti.view.addon.ui;

import java.io.Serializable;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.DateField;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Select;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;

@SuppressWarnings("serial")
public abstract class FilterReportViewForm extends Window {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout toolLayout;
	@AutoGenerated
	private Button btnCancel;
	@AutoGenerated
	private Button btnOk;
	@AutoGenerated
	private VerticalLayout parameterLayout;
	
	private Window parentWindow;
	
	@SuppressWarnings("unused")
	private CloseFilterDialogListener listener;
	 	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	protected List<Parameter> filterParameters = new ArrayList();
	private Map<String, Object> internalFilterComponents = new HashMap<String, Object>();
	private Map<String,Object> parameters = new HashMap<String, Object>();
	
	public enum PARAM_TYPE {
		STRING,
		INTEGER,
		FLOAT,
		BOOLEAN,
		LIST
	}
	
	private DialogResult dialogResultSelected;
	public enum DialogResult {
		  CANCEL,
		  OK
	}
	  
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public FilterReportViewForm(Window parentWindow, String caption, final CloseFilterDialogListener listener) {
		buildMainLayout();
		setContent(mainLayout);
		
		// TODO add user code here
		this.parentWindow = parentWindow;
		this.listener = listener;
		
		center();
		setModal(true);
		setResizable(false);
		setReadOnly(true);
		
		setWidth("300px");
		setHeight("-1px");
		
		setCaption(caption);
		
		addListener(new Window.CloseListener() {	  
			  public void windowClose(Window.CloseEvent  e) {
				  if (listener != null) {
					  listener.filterDialogClose(new CloseWindowDialogEvent(getWindow(), dialogResultSelected, parameters));
					  
				  }
				  
		      }
		});
				  
		btnOk.addListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {				
				// generate parameters 
				generateFilterComponents();
				
				// close filter view form
				dialogResultSelected = DialogResult.OK;
				
				FilterReportViewForm.this.parentWindow.removeWindow(FilterReportViewForm.this);
			}
		});
		
		btnCancel.addListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				// close filter view form
				dialogResultSelected = DialogResult.CANCEL;
								
				FilterReportViewForm.this.parentWindow.removeWindow(FilterReportViewForm.this);
				
			}
		});
		
		// generate filter view form
		generateFilterViewForm();
		
		// show filter view form
		showFilterViewForm();
		
	}

	@SuppressWarnings("rawtypes")
	private void generateFilterComponents() {
		for (Map.Entry<String, Object> entry : internalFilterComponents.entrySet()) {
			String key = entry.getKey();
		    Component component = (Component) entry.getValue();

		    if (component instanceof TextField)
		    	parameters.put(key, ((TextField)component).getValue());
		    else if (component instanceof CheckBox)
		    	parameters.put(key, ((CheckBox)component).getValue());
		    else if (component instanceof DateField)
		    	parameters.put(key, ((DateField)component).getValue());
		    else if (component instanceof ComboBox) {	
		    	ListParameter parameter;
				try {
					parameter = (ListParameter) getParamByKey(key);
					Class c = ((ComboBox)component).getValue().getClass();
					Method m = c.getMethod(toProperty(parameter.getValueId()), null);
					
			    	parameters.put(key, m.invoke(((ComboBox) component).getValue()));
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		    			    	
		    }
		}
	}
	
	private void showFilterViewForm() {
		for (Parameter p : filterParameters ) {
			Component component = null;
			
			if (p instanceof TextParameter) {
				component = new TextField(p.getLabel());
				component.setVisible(p.getVisible());
				component.setWidth("100%");
				((TextField)component).setValue(p.getValue());
				
				parameterLayout.addComponent(component);
			} else if (p instanceof IntegerParameter) {
				component = new TextField(p.getLabel());
				component.setVisible(p.getVisible());
				component.setWidth("100%");
				((TextField)component).setNullSettingAllowed(p.getNullSettingAllowed());
				((TextField)component).setValue(p.getValue());
				
				parameterLayout.addComponent(component);				
			} else if (p instanceof FloatParameter) {
				component = new TextField(p.getLabel());
				component.setVisible(p.getVisible());
				component.setWidth("100%");
				((TextField)component).setNullSettingAllowed(p.getNullSettingAllowed());
				((TextField)component).setValue(p.getValue());
				
				parameterLayout.addComponent(component);				
			} else if (p instanceof BooleanParameter) {
				component = new TextField(p.getLabel());
				component.setVisible(p.getVisible());
				component.setWidth("100%");
				((TextField)component).setNullSettingAllowed(p.getNullSettingAllowed());
				((TextField)component).setValue(p.getValue());
				
				parameterLayout.addComponent(component);
			} else if (p instanceof DateParameter) {
				component = new DateField(p.getLabel());
				component.setVisible(p.getVisible());
				component.setWidth("100%");				
				((DateField)component).setValue(p.getValue());
				((DateField)component).setDateFormat(((DateParameter) p).getDateFormat());
				
				parameterLayout.addComponent(component);
			} else if (p instanceof ListParameter) {
				component = new ComboBox(p.getLabel());
				component.setVisible(p.getVisible());
				component.setWidth("100%");			
				((ComboBox)component).setValue(p.getValue());
				((ComboBox)component).setNullSelectionAllowed(p.getVisible());
				((ComboBox)component).setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
				((ComboBox)component).setItemCaptionPropertyId(((ListParameter) p).getPropertyId());
				((ComboBox)component).setContainerDataSource(((ListParameter) p).getDataSource());
				
				parameterLayout.addComponent(component);
			}
			
			// initialize internal filter component list
			internalFilterComponents.put(p.getKey(), component);
		}
			
		this.parentWindow.addWindow(this);
	}
	
	private Parameter getParamByKey(String key) throws Exception {
		for (Parameter p : filterParameters) {
			if (p.getKey().equals(key))
				return p;
		}
		
		throw new Exception("Not exist any parameter with this key");
	}
	
	/**
     * Converts a method name into a camel-case field name, starting from {@code start}.
     */
    private String toProperty(String methodName) {
    	return "get" + Character.toUpperCase(methodName.charAt(0)) + methodName.substring(1);
    	
    }
    
    
	public abstract void generateFilterViewForm();
	
	public class Parameter {
		private String key;
		private Boolean visible;
		private String label;
		private Object value;
		private Boolean nullSettingAllowed;
		
		public Parameter(String key, Boolean visible, String label, Object value, Boolean nullSettingAllowed) {
			this.key = key;
			this.visible = visible;
			this.label = label;
			this.value = value;
			this.nullSettingAllowed = nullSettingAllowed;
			
		}

		public String getKey() {
			return key;
		}
		
		public Boolean getVisible() {
			return visible;
		}

		public String getLabel() {
			return label;
		}

		public Object getValue() {
			return value;
		}
		
		public Boolean getNullSettingAllowed() {
			return nullSettingAllowed;
		}
		
	}
	
	public class TextParameter extends Parameter {
		public TextParameter(String key, Boolean visible, String label, Object value, Boolean nullSettingAllowed) {
			super(key, visible, label, value, nullSettingAllowed);
		}
		
	}

	public class IntegerParameter extends Parameter {
		public IntegerParameter(String key, Boolean visible, String label, Object value, Boolean nullSettingAllowed) {
			super(key, visible, label, value, nullSettingAllowed);
		}
		
	}
	
	public class FloatParameter extends Parameter {
		public FloatParameter(String key, Boolean visible, String label, Object value, Boolean nullSettingAllowed) {
			super(key, visible, label, value, nullSettingAllowed);
		}
		
	}
	
	public class BooleanParameter extends Parameter {
		public BooleanParameter(String key, Boolean visible, String label, Object value, Boolean nullSettingAllowed) {
			super(key, visible, label, value, nullSettingAllowed);
		}
		
	}

	public class DateParameter extends Parameter {
		private String dateFormat;
		
		public DateParameter(String key, Boolean visible, String label, Object value,  Boolean nullSettingAllowed, String dateFormat) {
			super(key, visible, label, value, nullSettingAllowed);
			
			this.dateFormat = dateFormat;
		}
		
		public String getDateFormat() {
			return dateFormat;
		}

	}
	
	@SuppressWarnings("rawtypes")
	public class ListParameter extends Parameter {
		private BindingSource dataSource;
		private String propertyId;
		private String valueId;
		
		public ListParameter(String key, Boolean visible, String label, Object value, Boolean nullSettingAllowed, BindingSource dataSource, String propertyId, String valueId) {
			super(key, visible, label, value, nullSettingAllowed);
			
			this.dataSource = dataSource;
			this.propertyId = propertyId;
			this.valueId = valueId;			
		}
		
		public BindingSource getDataSource() {
			return dataSource;
		}

		public String getPropertyId() {
			return propertyId;
		}
		
		public String getValueId() {
			return valueId;
		}
	}
	
	public interface CloseFilterDialogListener extends Serializable {
		  public void filterDialogClose(CloseWindowDialogEvent event);
		  
	}

	public class CloseWindowDialogEvent extends CloseEvent {
		private final DialogResult dialogResult;
		private Map<String,Object> parameters;
			  
		public CloseWindowDialogEvent(Component source) {
			super(source);
			this.dialogResult = DialogResult.CANCEL;
		}
		
		public CloseWindowDialogEvent(Component source, DialogResult dialogResult, Map<String,Object> parameters) {
			super(source);
			this.dialogResult = dialogResult;
			this.parameters = parameters;
			
		}
		
		public DialogResult getDialogResult() {
			return this.dialogResult;
		}
		
		public Map<String,Object> getParameters() {
			return this.parameters;
			
		}
		
	}
	 
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// parameterLayout
		parameterLayout = new VerticalLayout();
		parameterLayout.setImmediate(false);
		parameterLayout.setWidth("100.0%");
		parameterLayout.setHeight("100.0%");
		parameterLayout.setMargin(true);
		parameterLayout.setSpacing(true);
		mainLayout.addComponent(parameterLayout);
		mainLayout.setExpandRatio(parameterLayout, 1.0f);
		
		// horizontalLayout_1
		toolLayout = buildToolLayout();
		mainLayout.addComponent(toolLayout);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildToolLayout() {
		// common part: create layout
		toolLayout = new HorizontalLayout();
		toolLayout.setImmediate(false);
		toolLayout.setWidth("100.0%");
		toolLayout.setHeight("-1px");
		toolLayout.setMargin(true);
		toolLayout.setSpacing(true);
		
		// btnOk
		btnOk = new Button();
		btnOk.setCaption("Ok");
		btnOk.setImmediate(true);
		btnOk.setWidth("-1px");
		btnOk.setHeight("-1px");
		toolLayout.addComponent(btnOk);
		toolLayout.setExpandRatio(btnOk, 1.0f);
		toolLayout.setComponentAlignment(btnOk, new Alignment(6));
		
		// btnCancel
		btnCancel = new Button();
		btnCancel.setCaption("Cancel");
		btnCancel.setImmediate(true);
		btnCancel.setWidth("-1px");
		btnCancel.setHeight("-1px");
		toolLayout.addComponent(btnCancel);
		toolLayout.setComponentAlignment(btnCancel, new Alignment(6));
		
		return toolLayout;
	}

}
