package com.thingtrack.konekti.view.addon.ui;
import java.util.ArrayList;
import java.util.List;

import com.google.gwt.core.ext.TreeLogger.Type;
import com.thingtrack.konekti.dao.template.util.PageList;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.data.BindingSource.IndexChangeEvent;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.ComponentContainer;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;


public class PaginationToolbar<T> extends AbstractToolbar {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private Button lastPageButton;
	@AutoGenerated
	private Button nextPageButton;
	@AutoGenerated
	private Label totalPageLabel;
	@AutoGenerated
	private TextField pageInputTextField;
	@AutoGenerated
	private Button previousPageButton;
	@AutoGenerated
	private Button firstPageButton;
	@AutoGenerated
	private ComboBox pageSizeCombox;
	
	public static final String PAGE_SIZE_10 = "10";
	public static final String PAGE_SIZE_30 = "30";
	public static final String PAGE_SIZE_50 = "50";
	public static final String PAGE_SIZE_100 = "100";
	
	
	
	private List<PaginationChangeListener> listeners = new ArrayList<PaginationChangeListener>();
	private PageList<T> pageList;
	
	public void setPageList(PageList<T> pageList){
		
		this.pageList = pageList;
		pageInputTextField.setValue(pageList.getPageIndex()+1);
		totalPageLabel.setValue("de " + pageList.getPages());
		
		getBindingSource().removeAllItems();
		getBindingSource().addAll(pageList.getEntities());
	}
	
	public void addListener(PaginationChangeListener listener){
		listeners.add(listener);
	}
	
	public void removeListener(PaginationChangeListener listener){
		listeners.remove(listener);
	}
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public PaginationToolbar(int position, BindingSource<T> bindingSource) {
		super(position, bindingSource);
		buildMainLayout();
		addComponent(mainLayout);

		// TODO add user code here
		pageSizeCombox.setImmediate(true);
		pageInputTextField.setImmediate(true);
		
		pageSizeCombox.addItem(PAGE_SIZE_10);
		pageSizeCombox.addItem(PAGE_SIZE_30);
		pageSizeCombox.addItem(PAGE_SIZE_50);
		pageSizeCombox.addItem(PAGE_SIZE_100);
		pageSizeCombox.select(PAGE_SIZE_100);
		
		pageSizeCombox.addListener(new Property.ValueChangeListener() {
			
			@Override
			public void valueChange(ValueChangeEvent event) {
				int pageSize = Integer.parseInt((String) event.getProperty().getValue());
				for(PaginationChangeListener listener : listeners){
					listener.onPageChange(new PaginationChangeEvent(pageSize, 0, 0));
				}				
			}
		});
		
		pageInputTextField.addListener(new Property.ValueChangeListener() {
			
			@Override
			public void valueChange(ValueChangeEvent event) {
				
				if(pageList == null)
					return;
				
				int newPageIndex;
				if(String.class.isInstance(event.getProperty().getValue()))
					 newPageIndex = Integer.parseInt((String)event.getProperty().getValue());
				else newPageIndex = (Integer) event.getProperty().getValue();
				
				if(!(newPageIndex > 0 &&  newPageIndex <= pageList.getPages()))
					return;
				
				for(PaginationChangeListener listener : listeners){
					listener.onPageChange(new PaginationChangeEvent(pageList.getPageSize(), pageList.getPageIndex(), newPageIndex-1));
				}
				
			}
		});
		
		firstPageButton.addListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				
				if(pageList == null)
					return;
				
				for(PaginationChangeListener listener : listeners){
					listener.onPageChange(new PaginationChangeEvent(pageList.getPageSize(), pageList.getPageIndex(), 0));
				}
			}
		});
		
		previousPageButton.addListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				
				if(pageList == null)
					return;
				
				int pageIndex = pageList.getPageIndex() == 0 ? 0 : pageList.getPageIndex() - 1 ;
				
				for(PaginationChangeListener listener : listeners){
					listener.onPageChange(new PaginationChangeEvent(pageList.getPageSize(), pageList.getPageIndex(), pageIndex));
				}
			}
		});
		
		nextPageButton.addListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				
				if(pageList == null)
					return;
				
				int pageIndex = pageList.getPageIndex() == pageList.getPages() - 1 ? pageList.getPages() - 1 : pageList.getPageIndex() + 1;
				
				for(PaginationChangeListener listener : listeners){
					listener.onPageChange(new PaginationChangeEvent(pageList.getPageSize(), pageList.getPageIndex(), pageIndex));
				}
			}
		});
		
		
		lastPageButton.addListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				
				if(pageList == null)
					return;
				
				for(PaginationChangeListener listener : listeners){
					listener.onPageChange(new PaginationChangeEvent(pageList.getPageSize(), pageList.getPageIndex(), pageList.getPages()-1));
				}
			}
		});		
	}
	
	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSpacing(true);
		
		// pagesizeCombox
		pageSizeCombox = new ComboBox();
		pageSizeCombox.setImmediate(false);
		pageSizeCombox.setWidth("-1px");
		pageSizeCombox.setHeight("-1px");
		mainLayout.addComponent(pageSizeCombox);
		
		// firstPageButton
		firstPageButton = new Button();
		firstPageButton.setCaption("Prim. Pag");
		firstPageButton.setImmediate(false);
		firstPageButton.setWidth("-1px");
		firstPageButton.setHeight("-1px");
		mainLayout.addComponent(firstPageButton);
		
		// previousPageButton
		previousPageButton = new Button();
		previousPageButton.setCaption("Re Pag");
		previousPageButton.setImmediate(true);
		previousPageButton.setWidth("-1px");
		previousPageButton.setHeight("-1px");
		mainLayout.addComponent(previousPageButton);
		
		// pageInputTextField
		pageInputTextField = new TextField();
		pageInputTextField.setImmediate(false);
		pageInputTextField.setWidth("85px");
		pageInputTextField.setHeight("-1px");
		pageInputTextField.setInputPrompt("página actual");
		mainLayout.addComponent(pageInputTextField);
		
		// totalPageLabel
		totalPageLabel = new Label();
		totalPageLabel.setImmediate(false);
		totalPageLabel.setWidth("-1px");
		totalPageLabel.setHeight("-1px");
		totalPageLabel.setValue("de  ");
		mainLayout.addComponent(totalPageLabel);
		
		// nextPageButton
		nextPageButton = new Button();
		nextPageButton.setCaption("Av Pag");
		nextPageButton.setImmediate(true);
		nextPageButton.setWidth("-1px");
		nextPageButton.setHeight("-1px");
		mainLayout.addComponent(nextPageButton);
		
		// lastPageButton
		lastPageButton = new Button();
		lastPageButton.setCaption("Últ. Pag");
		lastPageButton.setImmediate(false);
		lastPageButton.setWidth("-1px");
		lastPageButton.setHeight("-1px");
		mainLayout.addComponent(lastPageButton);
		mainLayout.setExpandRatio(lastPageButton, 1.0f);
		
		return mainLayout;
	}

	@Override
	public int getPosition() {
		return super.position;
	}

	@Override
	public ComponentContainer getContent() {
		return mainLayout;
	}

	@Override
	public void bindingSourceIndexChange(IndexChangeEvent event) {
		// TODO Auto-generated method stub
		
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public BindingSource<T> getBindingSource() {
		return ((BindingSource<T>) super.getBindingSource());
	}
	
	public interface PaginationChangeListener{
		
		public void onPageChange(PaginationToolbar<?>.PaginationChangeEvent event);
	}
	
	public class PaginationChangeEvent {
		
		private int previousPage;
		private int pageIndex;
		private int pageSize;
		
		public PaginationChangeEvent(int pageSize, int previousPage,  int pageIndex){
			this.pageSize = pageSize;
			this.previousPage = previousPage;
			this.pageIndex = pageIndex;
		}
		
		public int getPageSize(){
			return this.pageSize;
		}
		
		public int getPreviousPage(){
			return this.previousPage;
		}
		
		public int getPage(){
			return pageIndex;
		}
	}
	

}
