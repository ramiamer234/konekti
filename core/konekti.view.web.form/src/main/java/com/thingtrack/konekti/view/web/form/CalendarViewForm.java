package com.thingtrack.konekti.view.web.form;

import org.osgi.framework.BundleContext;
import org.osgi.framework.FrameworkUtil;
import org.osgi.framework.ServiceReference;

import com.thingtrack.konekti.domain.CalendarType;
import com.thingtrack.konekti.service.api.CalendarTypeService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Select;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class CalendarViewForm extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private TextField observationField;
	@AutoGenerated
	private TextField descriptionField;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_2;
	@AutoGenerated
	private ComboBox calendarTypeField;
	@AutoGenerated
	private TextField nameField;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;
	@AutoGenerated
	private CheckBox activeField;
	@AutoGenerated
	private Embedded logoField;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	// form services
	private CalendarTypeService calendarTypeService;
	
	// organization type datasource
	private BeanItemContainer<CalendarType> bcCalendarType = new BindingSource<CalendarType>(CalendarType.class);	
	
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 * @throws Exception 
	 * @throws IllegalArgumentException 
	 */
	public CalendarViewForm() throws IllegalArgumentException, Exception {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		initComponents();
		
		// configure Organization Type data
		calendarTypeField.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		calendarTypeField.setItemCaptionPropertyId("description");
		
		// get form services from OSGi Service Registry
		getServices();
		
		// load data sources
		loadData();
	}
	
	private void initComponents() {
		observationField.setNullRepresentation("");
		nameField.setNullRepresentation("");
		descriptionField.setNullRepresentation("");

		nameField.setRequiredError(nameField.getCaption() + " es un campo requerido");
		calendarTypeField.setRequiredError(calendarTypeField.getCaption() + " es un campo requerido");
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void getServices() {
		try {
			BundleContext bundleContext = FrameworkUtil.getBundle(CalendarViewForm.class).getBundleContext();
			
			ServiceReference calendarTypeServiceReference = bundleContext.getServiceReference(CalendarTypeService.class.getName());
			calendarTypeService = CalendarTypeService.class.cast(bundleContext.getService(calendarTypeServiceReference));
			
		}
		catch (Exception e) {
			e.getMessage();
			
		}
		
	}
	
	private void loadData() throws IllegalArgumentException, Exception {		
		bcCalendarType.removeAllItems();
		bcCalendarType.addAll(calendarTypeService.getAll());
		
		calendarTypeField.setContainerDataSource(bcCalendarType);
		
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("550px");
		mainLayout.setHeight("330px");
		mainLayout.setMargin(true);
		
		// top-level component properties
		setWidth("550px");
		setHeight("330px");
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout.addComponent(horizontalLayout_1);
		
		// horizontalLayout_2
		horizontalLayout_2 = buildHorizontalLayout_2();
		mainLayout.addComponent(horizontalLayout_2);
		
		// descriptionField
		descriptionField = new TextField();
		descriptionField.setCaption("Descripci√≥n");
		descriptionField.setImmediate(false);
		descriptionField.setWidth("100.0%");
		descriptionField.setHeight("24px");
		descriptionField.setTabIndex(2);
		mainLayout.addComponent(descriptionField);
		
		// observationField
		observationField = new TextField();
		observationField.setCaption("Observaciones");
		observationField.setImmediate(false);
		observationField.setWidth("100.0%");
		observationField.setHeight("120px");
		observationField.setTabIndex(6);
		mainLayout.addComponent(observationField);
		mainLayout.setExpandRatio(observationField, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("100.0%");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(false);
		
		// logoField
		logoField = new Embedded();
		logoField.setCaption("Logo");
		logoField.setImmediate(false);
		logoField.setWidth("70px");
		logoField.setHeight("60px");
		logoField
				.setSource(new ThemeResource("img/component/embedded_icon.png"));
		logoField.setType(1);
		logoField.setMimeType("image/png");
		horizontalLayout_1.addComponent(logoField);
		
		// activeField
		activeField = new CheckBox();
		activeField.setCaption("Activo");
		activeField.setImmediate(false);
		activeField.setWidth("-1px");
		activeField.setHeight("-1px");
		activeField.setRequired(true);
		horizontalLayout_1.addComponent(activeField);
		horizontalLayout_1
				.setComponentAlignment(activeField, new Alignment(34));
		
		return horizontalLayout_1;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_2() {
		// common part: create layout
		horizontalLayout_2 = new HorizontalLayout();
		horizontalLayout_2.setImmediate(false);
		horizontalLayout_2.setWidth("100.0%");
		horizontalLayout_2.setHeight("-1px");
		horizontalLayout_2.setMargin(false);
		horizontalLayout_2.setSpacing(true);
		
		// nameField
		nameField = new TextField();
		nameField.setCaption("Nombre");
		nameField.setImmediate(false);
		nameField.setWidth("100.0%");
		nameField.setHeight("-1px");
		nameField.setTabIndex(1);
		nameField.setRequired(true);
		horizontalLayout_2.addComponent(nameField);
		horizontalLayout_2.setExpandRatio(nameField, 1.0f);
		
		// calendarTypeField
		calendarTypeField = new ComboBox();
		calendarTypeField.setCaption("Tipo calendario");
		calendarTypeField.setImmediate(false);
		calendarTypeField.setWidth("-1px");
		calendarTypeField.setHeight("-1px");
		calendarTypeField.setTabIndex(3);
		calendarTypeField.setRequired(true);
		horizontalLayout_2.addComponent(calendarTypeField);
		
		return horizontalLayout_2;
	}
}