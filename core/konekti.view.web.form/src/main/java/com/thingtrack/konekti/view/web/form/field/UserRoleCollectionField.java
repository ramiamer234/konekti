package com.thingtrack.konekti.view.web.form.field;

import org.osgi.framework.BundleContext;
import org.osgi.framework.FrameworkUtil;
import org.osgi.framework.ServiceReference;
import org.vaadin.addon.customfield.CustomField;

import com.thingtrack.konekti.domain.Action;
import com.thingtrack.konekti.domain.Area;
import com.thingtrack.konekti.domain.Permission;
import com.thingtrack.konekti.domain.Role;
import com.thingtrack.konekti.domain.User;
import com.thingtrack.konekti.service.api.ActionService;
import com.thingtrack.konekti.service.api.PermissionService;
import com.thingtrack.konekti.service.api.RoleService;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Select;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class UserRoleCollectionField extends CustomField {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout valuesLayout;
	@AutoGenerated
	private HorizontalLayout actionLayout;
	@AutoGenerated
	private VerticalLayout editToolBarAction;
	@AutoGenerated
	private Button btnRemoveAction;
	@AutoGenerated
	private Button btnEditAction;
	@AutoGenerated
	private Button btnAddAction;
	@AutoGenerated
	private VerticalLayout aux2LayoutAction;
	@AutoGenerated
	private Table tbAvailableAction;
	@AutoGenerated
	private VerticalLayout moveToolbarAction;
	@AutoGenerated
	private Button btnSetAllAction;
	@AutoGenerated
	private Button btnUnsetAction;
	@AutoGenerated
	private Button btnSetAction;
	@AutoGenerated
	private Button btnUnsetAllAction;
	@AutoGenerated
	private VerticalLayout auxLayoutAction;
	@AutoGenerated
	private Table tbActiveAction;
	@AutoGenerated
	private HorizontalLayout permissionLayout;
	@AutoGenerated
	private VerticalLayout editToolBarPermission;
	@AutoGenerated
	private Button btnRemovePermission;
	@AutoGenerated
	private Button btnEditPermission;
	@AutoGenerated
	private Button btnAddPermission;
	@AutoGenerated
	private VerticalLayout aux2LayoutPermission;
	@AutoGenerated
	private Table tbAvailablePermission;
	@AutoGenerated
	private VerticalLayout moveToolbarPermission;
	@AutoGenerated
	private Button btnSetPermission;
	@AutoGenerated
	private Button btnSetAllPermission;
	@AutoGenerated
	private Button btnUnsetAllPermission;
	@AutoGenerated
	private Button btnUnsetPermission;
	@AutoGenerated
	private VerticalLayout auxLayoutPermission;
	@AutoGenerated
	private Table tbActivePermission;
	@AutoGenerated
	private HorizontalLayout roleLayout;
	@AutoGenerated
	private Button btnApply;
	@AutoGenerated
	private Button btnRemoveRole;
	@AutoGenerated
	private Button btnEditRole;
	@AutoGenerated
	private Button btnAddRole;
	@AutoGenerated
	private ComboBox cmbRoles;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private RoleService roleService;
	private PermissionService permissionService;
	private ActionService actionService;
	
	private BeanItemContainer<Role> dsUserRole = new BeanItemContainer<Role>(Role.class);
	private BeanItemContainer<Permission> dsActivePermission = new BeanItemContainer<Permission>(Permission.class);
	private BeanItemContainer<Permission> dsAvailablePermission = new BeanItemContainer<Permission>(Permission.class);
	private BeanItemContainer<Action> dsActiveAction = new BeanItemContainer<Action>(Action.class);
	private BeanItemContainer<Action> dsAvailableAction = new BeanItemContainer<Action>(Action.class);
	
	private User user;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public UserRoleCollectionField() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		getServices();
		
		btnApply.setEnabled(false);
		
		// initialize Components
		initialize();
		
		// set Component handlers
		setRoleHandler();
		setPermissionHandler();
		
		setPermissionButtonHandlers();
		setActionButtonHandlers();

	}
		
	private void initialize() {
		try {
			cmbRoles.setImmediate(true);			
			cmbRoles.setContainerDataSource(dsUserRole);
			cmbRoles.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
			cmbRoles.setItemCaptionPropertyId("description");
			
			tbActivePermission.setImmediate(true);
			tbActivePermission.setSelectable(true);			
			dsActivePermission.addNestedContainerProperty("command.caption");
			tbActivePermission.setContainerDataSource(dsActivePermission);
			tbActivePermission.setVisibleColumns(new String[] { "code", "description", "comment" } );       
			tbActivePermission.setColumnHeaders(new String[] { "Codigo", "Descripcion", "Comentarios" } );
			
			tbAvailablePermission.setImmediate(true);
			tbAvailablePermission.setSelectable(true);	
			dsAvailablePermission.addNestedContainerProperty("command.caption");
			tbAvailablePermission.setContainerDataSource(dsAvailablePermission);
			tbAvailablePermission.setVisibleColumns(new String[] { "code", "description", "comment" } );       
			tbAvailablePermission.setColumnHeaders(new String[] { "Codigo", "Descripcion", "Comentarios" } );
			
			tbActiveAction.setImmediate(true);
			tbActiveAction.setSelectable(true);		
			tbActiveAction.setContainerDataSource(dsActiveAction);
			tbActiveAction.setVisibleColumns(new String[] { "code", "description", "comment" } );       
			tbActiveAction.setColumnHeaders(new String[] { "Codigo", "Descripcion", "Comentarios" } );
			
			tbAvailableAction.setImmediate(true);
			tbAvailableAction.setSelectable(true);		
			tbAvailableAction.setContainerDataSource(dsAvailableAction);
			tbAvailableAction.setVisibleColumns(new String[] { "code", "description", "comment" } );       
			tbAvailableAction.setColumnHeaders(new String[] { "Codigo", "Descripcion", "Comentarios" } );
		}
		catch(Exception e) {
			throw new RuntimeException("Â¡Error al crear los Compinentes de Roles!", e);
		}
		
	}
	
	private void setRoleHandler() {
		btnAddRole.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});
		
		btnEditRole.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});
		
		btnRemoveRole.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});
		
		btnApply.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// set the new rol to the user for the active area
				for (Role role : user.getRoles()) {
					if (role.getArea().equals(user.getDefaultArea())) {
						user.getRoles().remove(role);
						break;
					}
				}
				
				if (cmbRoles.getValue() != null) 
					user.getRoles().add((Role) cmbRoles.getValue());
				
			
				btnApply.setEnabled(false);
			}
		});
		
		cmbRoles.addListener(new ValueChangeListener() {			
			@Override
			public void valueChange(com.vaadin.data.Property.ValueChangeEvent event) {
				if (event.getProperty().getValue() != null) {
					refreshActivePermissionDataSource((Role) event.getProperty().getValue());				
					refreshAvailablePermissionDataSource((Role) event.getProperty().getValue());
				}
				else {
					dsActivePermission.removeAllItems();
					dsAvailablePermission.removeAllItems();
					dsActiveAction.removeAllItems();
					dsAvailableAction.removeAllItems();
				}
				
				// select the first register on the active table
				if (dsActivePermission.size() > 0)
					tbActivePermission.select(dsActivePermission.getIdByIndex(0));
				
				btnApply.setEnabled(true);
					
			}
		});
		
	}
	
	private void setPermissionHandler() {
		tbActivePermission.addListener(new ValueChangeListener() {			
			@Override
			public void valueChange(
					com.vaadin.data.Property.ValueChangeEvent event) {
				if (event.getProperty().getValue() == null)
					return;
				
				refreshActiveActionDataSource((Permission) event.getProperty().getValue());
				refreshAvailableActionDataSource((Permission) event.getProperty().getValue());
				
				// select the first register on the active table
				if (dsActiveAction.size() > 0)
					tbActiveAction.select(dsActiveAction.getIdByIndex(0));
				
			}
		});
		
		tbAvailablePermission.addListener(new ValueChangeListener() {			
			@Override
			public void valueChange(
					com.vaadin.data.Property.ValueChangeEvent event) {
				if (event.getProperty().getValue() == null)
					return;
				
				refreshActiveActionDataSource((Permission) event.getProperty().getValue());
				refreshAvailableActionDataSource((Permission) event.getProperty().getValue());
				
				// select the first register on the active table
				if (dsActiveAction.size() > 0)
					tbActiveAction.select(dsActiveAction.getIdByIndex(0));
				
			}
		});
	}
	
	private void setPermissionButtonHandlers() {
		btnSetAllPermission.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});
		
		btnSetPermission.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});
		
		btnUnsetPermission.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});
		
		btnUnsetAllPermission.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});
	
		btnAddPermission.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});
		
		btnEditPermission.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});
		
		btnRemovePermission.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});		
	}
	
	private void setActionButtonHandlers() {
		btnSetAllAction.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});
		
		btnSetAction.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});
		
		btnUnsetAction.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});
		
		btnUnsetAllAction.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});
	
		btnAddAction.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});
		
		btnEditAction.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});
		
		btnRemoveAction.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});		
	}
		
	@Override
	public Class<?> getType() {
		return User.class;
		
	}
	
	@Override
	public void setPropertyDataSource(Property newDataSource) {			
		super.setPropertyDataSource(newDataSource);

	}
	
	@Override
	public void setValue(Object object) {
		super.setValue(object);
		
		if(object instanceof User){
			user = (User)object;
			
			try {
				// fill all Area Roles
				//dsUserRole.addAll(roleService.getAll(user.getActiveArea()));
				dsUserRole.addAll(roleService.getAll(user.getDefaultArea()));
				
				// set active User Role in the active Area
				//cmbRoles.setValue(getRoleFromUser(user.getActiveArea()));
				cmbRoles.setValue(getRoleFromUser(user.getDefaultArea()));
			} catch (Exception e) {
				throw new RuntimeException("Â¡Error al recuperar los Roles Usuario!", e);
			}
			
		}
	}
	
	private void refreshActivePermissionDataSource(Role role) {
		try {		
			dsActivePermission.removeAllItems();
			dsActivePermission.addAll(role.getPermissions());			
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("Â¡No se pudo refrescar los Permisos Activos!", e);
		} catch (Exception e) {
			throw new RuntimeException("Â¡No se pudo refrescar los Permisos Activos!", e);
		}	
	}
	
	private void refreshAvailablePermissionDataSource(Role role) {
		dsAvailablePermission.removeAllItems();
		try {
			for (Permission permission : permissionService.getAllByRole(role)) {
				if (!role.getPermissions().contains(permission))
					dsAvailablePermission.addBean(permission);
			}
		} catch (Exception e) {
			throw new RuntimeException("Â¡No se pudo recoger todos los permisos!", e);
		}
		
	}
	
	private void refreshActiveActionDataSource(Permission permission) {
		try {		
			dsActiveAction.removeAllItems();
			dsActiveAction.addAll(permission.getActions());			
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("Â¡No se pudo refrescar los Acciones Activos!", e);
		} catch (Exception e) {
			throw new RuntimeException("Â¡No se pudo refrescar los Acciones Activos!", e);
		}	
	}
	
	private void refreshAvailableActionDataSource(Permission permission) {
		dsAvailableAction.removeAllItems();
		try {
			for (Action action : actionService.getAll()) {
				if (!permission.getActions().contains(action))
					dsAvailableAction.addBean(action);
			}
		} catch (Exception e) {
			throw new RuntimeException("Â¡No se pudo recoger todos las acciones!", e);
		}
	}
	
	private Role getRoleFromUser(Area area) {
		for (Role role : user.getRoles()) {
			if (role.getArea().equals(area))
				return role;
			
		}
		
		return null;
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void getServices() {
		try {
			BundleContext bundleContext = FrameworkUtil.getBundle(UserRoleCollectionField.class).getBundleContext();
			
			ServiceReference roleServiceReference = bundleContext.getServiceReference(RoleService.class.getName());
			roleService = RoleService.class.cast(bundleContext.getService(roleServiceReference));

			ServiceReference permissionServiceReference = bundleContext.getServiceReference(PermissionService.class.getName());
			permissionService = PermissionService.class.cast(bundleContext.getService(permissionServiceReference));
			
			ServiceReference actionServiceReference = bundleContext.getServiceReference(ActionService.class.getName());
			actionService = ActionService.class.cast(bundleContext.getService(actionServiceReference));
			
		}
		catch (Exception e) {
			e.getMessage();
			
		}
		
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// roleLayout
		roleLayout = buildRoleLayout();
		mainLayout.addComponent(roleLayout);
		
		// valuesLayout
		valuesLayout = buildValuesLayout();
		mainLayout.addComponent(valuesLayout);
		mainLayout.setExpandRatio(valuesLayout, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildRoleLayout() {
		// common part: create layout
		roleLayout = new HorizontalLayout();
		roleLayout.setImmediate(false);
		roleLayout.setWidth("100.0%");
		roleLayout.setHeight("-1px");
		roleLayout.setMargin(false);
		
		// cmbRoles
		cmbRoles = new ComboBox();
		cmbRoles.setCaption("Roles:");
		cmbRoles.setImmediate(false);
		cmbRoles.setWidth("-1px");
		cmbRoles.setHeight("-1px");
		roleLayout.addComponent(cmbRoles);
		
		// btnAddRole
		btnAddRole = new Button();
		btnAddRole.setIcon(new ThemeResource(
				"../konekti/images/icons/edition-toolbar/plus.png"));
		btnAddRole.setImmediate(true);
		btnAddRole.setWidth("-1px");
		btnAddRole.setHeight("-1px");
		roleLayout.addComponent(btnAddRole);
		roleLayout.setComponentAlignment(btnAddRole, new Alignment(9));
		
		// btnEditRole
		btnEditRole = new Button();
		btnEditRole.setIcon(new ThemeResource(
				"../konekti/images/icons/edition-toolbar/pencil.png"));
		btnEditRole.setImmediate(true);
		btnEditRole.setWidth("-1px");
		btnEditRole.setHeight("-1px");
		roleLayout.addComponent(btnEditRole);
		roleLayout.setComponentAlignment(btnEditRole, new Alignment(9));
		
		// btnRemoveRole
		btnRemoveRole = new Button();
		btnRemoveRole.setIcon(new ThemeResource(
				"../konekti/images/icons/edition-toolbar/minus.png"));
		btnRemoveRole.setImmediate(true);
		btnRemoveRole.setWidth("-1px");
		btnRemoveRole.setHeight("-1px");
		roleLayout.addComponent(btnRemoveRole);
		roleLayout.setComponentAlignment(btnRemoveRole, new Alignment(9));
		
		// btnApply
		btnApply = new Button();
		btnApply.setCaption("Aplicar");
		btnApply.setImmediate(false);
		btnApply.setWidth("-1px");
		btnApply.setHeight("-1px");
		roleLayout.addComponent(btnApply);
		roleLayout.setExpandRatio(btnApply, 1.0f);
		roleLayout.setComponentAlignment(btnApply, new Alignment(9));
		
		return roleLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildValuesLayout() {
		// common part: create layout
		valuesLayout = new HorizontalLayout();
		valuesLayout.setImmediate(false);
		valuesLayout.setWidth("100.0%");
		valuesLayout.setHeight("100.0%");
		valuesLayout.setMargin(false);
		valuesLayout.setSpacing(true);
		
		// permissionLayout
		permissionLayout = buildPermissionLayout();
		valuesLayout.addComponent(permissionLayout);
		
		// actionLayout
		actionLayout = buildActionLayout();
		valuesLayout.addComponent(actionLayout);
		
		return valuesLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildPermissionLayout() {
		// common part: create layout
		permissionLayout = new HorizontalLayout();
		permissionLayout.setImmediate(false);
		permissionLayout.setWidth("-1px");
		permissionLayout.setHeight("100.0%");
		permissionLayout.setMargin(false);
		
		// tbActivePermission
		tbActivePermission = new Table();
		tbActivePermission.setCaption("Permisos Activos");
		tbActivePermission.setImmediate(false);
		tbActivePermission.setWidth("180px");
		tbActivePermission.setHeight("100.0%");
		permissionLayout.addComponent(tbActivePermission);
		
		// moveToolbarPermission
		moveToolbarPermission = buildMoveToolbarPermission();
		permissionLayout.addComponent(moveToolbarPermission);
		
		// tbAvailablePermission
		tbAvailablePermission = new Table();
		tbAvailablePermission.setCaption("Permisos Disponibles");
		tbAvailablePermission.setImmediate(false);
		tbAvailablePermission.setWidth("180px");
		tbAvailablePermission.setHeight("100.0%");
		permissionLayout.addComponent(tbAvailablePermission);
		
		// editToolBarPermission
		editToolBarPermission = buildEditToolBarPermission();
		permissionLayout.addComponent(editToolBarPermission);
		
		return permissionLayout;
	}

	@AutoGenerated
	private VerticalLayout buildMoveToolbarPermission() {
		// common part: create layout
		moveToolbarPermission = new VerticalLayout();
		moveToolbarPermission.setImmediate(false);
		moveToolbarPermission.setWidth("50px");
		moveToolbarPermission.setHeight("100.0%");
		moveToolbarPermission.setMargin(false);
		
		// auxLayoutPermission
		auxLayoutPermission = new VerticalLayout();
		auxLayoutPermission.setImmediate(false);
		auxLayoutPermission.setWidth("100.0%");
		auxLayoutPermission.setHeight("50px");
		auxLayoutPermission.setMargin(false);
		moveToolbarPermission.addComponent(auxLayoutPermission);
		
		// btnUnsetPermission
		btnUnsetPermission = new Button();
		btnUnsetPermission.setIcon(new ThemeResource(
				"../konekti/images/icons/role-component/control-double.png"));
		btnUnsetPermission.setImmediate(true);
		btnUnsetPermission.setWidth("100.0%");
		btnUnsetPermission.setHeight("-1px");
		moveToolbarPermission.addComponent(btnUnsetPermission);
		
		// btnUnsetAllPermission
		btnUnsetAllPermission = new Button();
		btnUnsetAllPermission.setIcon(new ThemeResource(
				"../konekti/images/icons/role-component/control.png"));
		btnUnsetAllPermission.setImmediate(true);
		btnUnsetAllPermission.setWidth("100.0%");
		btnUnsetAllPermission.setHeight("-1px");
		moveToolbarPermission.addComponent(btnUnsetAllPermission);
		
		// btnSetAllPermission
		btnSetAllPermission = new Button();
		btnSetAllPermission
				.setIcon(new ThemeResource(
						"../konekti/images/icons/role-component/control-180.png"));
		btnSetAllPermission.setImmediate(true);
		btnSetAllPermission.setWidth("100.0%");
		btnSetAllPermission.setHeight("-1px");
		moveToolbarPermission.addComponent(btnSetAllPermission);
		
		// btnSetPermission
		btnSetPermission = new Button();
		btnSetPermission.setIcon(new ThemeResource(
				"../konekti/images/icons/role-component/control-double-180.png"));
		btnSetPermission.setImmediate(true);
		btnSetPermission.setWidth("100.0%");
		btnSetPermission.setHeight("-1px");
		moveToolbarPermission.addComponent(btnSetPermission);
		moveToolbarPermission.setExpandRatio(btnSetPermission, 1.0f);
		
		return moveToolbarPermission;
	}

	@AutoGenerated
	private VerticalLayout buildEditToolBarPermission() {
		// common part: create layout
		editToolBarPermission = new VerticalLayout();
		editToolBarPermission.setImmediate(false);
		editToolBarPermission.setWidth("50px");
		editToolBarPermission.setHeight("100.0%");
		editToolBarPermission.setMargin(false);
		
		// aux2LayoutPermission
		aux2LayoutPermission = new VerticalLayout();
		aux2LayoutPermission.setImmediate(false);
		aux2LayoutPermission.setWidth("100.0%");
		aux2LayoutPermission.setHeight("50px");
		aux2LayoutPermission.setMargin(false);
		editToolBarPermission.addComponent(aux2LayoutPermission);
		
		// btnAddPermission
		btnAddPermission = new Button();
		btnAddPermission.setIcon(new ThemeResource(
				"../konekti/images/icons/edition-toolbar/plus.png"));
		btnAddPermission.setImmediate(true);
		btnAddPermission.setWidth("100.0%");
		btnAddPermission.setHeight("-1px");
		editToolBarPermission.addComponent(btnAddPermission);
		
		// btnEditPermission
		btnEditPermission = new Button();
		btnEditPermission.setIcon(new ThemeResource(
				"../konekti/images/icons/edition-toolbar/pencil.png"));
		btnEditPermission.setImmediate(true);
		btnEditPermission.setWidth("100.0%");
		btnEditPermission.setHeight("-1px");
		editToolBarPermission.addComponent(btnEditPermission);
		
		// btnRemovePermission
		btnRemovePermission = new Button();
		btnRemovePermission.setIcon(new ThemeResource(
				"../konekti/images/icons/edition-toolbar/minus.png"));
		btnRemovePermission.setImmediate(true);
		btnRemovePermission.setWidth("100.0%");
		btnRemovePermission.setHeight("-1px");
		editToolBarPermission.addComponent(btnRemovePermission);
		editToolBarPermission.setExpandRatio(btnRemovePermission, 1.0f);
		
		return editToolBarPermission;
	}

	@AutoGenerated
	private HorizontalLayout buildActionLayout() {
		// common part: create layout
		actionLayout = new HorizontalLayout();
		actionLayout.setImmediate(false);
		actionLayout.setWidth("-1px");
		actionLayout.setHeight("100.0%");
		actionLayout.setMargin(false);
		
		// tbActiveAction
		tbActiveAction = new Table();
		tbActiveAction.setCaption("Acciones Activos");
		tbActiveAction.setImmediate(false);
		tbActiveAction.setWidth("180px");
		tbActiveAction.setHeight("100.0%");
		actionLayout.addComponent(tbActiveAction);
		
		// moveToolbarAction
		moveToolbarAction = buildMoveToolbarAction();
		actionLayout.addComponent(moveToolbarAction);
		
		// tbAvailableAction
		tbAvailableAction = new Table();
		tbAvailableAction.setCaption("Acciones Disponibles");
		tbAvailableAction.setImmediate(false);
		tbAvailableAction.setWidth("180px");
		tbAvailableAction.setHeight("100.0%");
		actionLayout.addComponent(tbAvailableAction);
		
		// editToolBarAction
		editToolBarAction = buildEditToolBarAction();
		actionLayout.addComponent(editToolBarAction);
		
		return actionLayout;
	}

	@AutoGenerated
	private VerticalLayout buildMoveToolbarAction() {
		// common part: create layout
		moveToolbarAction = new VerticalLayout();
		moveToolbarAction.setImmediate(false);
		moveToolbarAction.setWidth("50px");
		moveToolbarAction.setHeight("100.0%");
		moveToolbarAction.setMargin(false);
		
		// auxLayoutAction
		auxLayoutAction = new VerticalLayout();
		auxLayoutAction.setImmediate(false);
		auxLayoutAction.setWidth("100.0%");
		auxLayoutAction.setHeight("50px");
		auxLayoutAction.setMargin(false);
		moveToolbarAction.addComponent(auxLayoutAction);
		
		// btnUnsetAllAction
		btnUnsetAllAction = new Button();
		btnUnsetAllAction.setIcon(new ThemeResource(
				"../konekti/images/icons/role-component/control-double.png"));
		btnUnsetAllAction.setImmediate(true);
		btnUnsetAllAction.setWidth("100.0%");
		btnUnsetAllAction.setHeight("-1px");
		moveToolbarAction.addComponent(btnUnsetAllAction);
		
		// btnSetAction
		btnSetAction = new Button();
		btnSetAction.setIcon(new ThemeResource(
				"../konekti/images/icons/role-component/control-180.png"));
		btnSetAction.setImmediate(true);
		btnSetAction.setWidth("100.0%");
		btnSetAction.setHeight("-1px");
		moveToolbarAction.addComponent(btnSetAction);
		
		// btnUnsetAction
		btnUnsetAction = new Button();
		btnUnsetAction.setIcon(new ThemeResource(
				"../konekti/images/icons/role-component/control.png"));
		btnUnsetAction.setImmediate(true);
		btnUnsetAction.setWidth("100.0%");
		btnUnsetAction.setHeight("-1px");
		moveToolbarAction.addComponent(btnUnsetAction);
		
		// btnSetAllAction
		btnSetAllAction = new Button();
		btnSetAllAction
				.setIcon(new ThemeResource(
						"../konekti/images/icons/role-component/control-double-180.png"));
		btnSetAllAction.setImmediate(true);
		btnSetAllAction.setWidth("100.0%");
		btnSetAllAction.setHeight("-1px");
		moveToolbarAction.addComponent(btnSetAllAction);
		moveToolbarAction.setExpandRatio(btnSetAllAction, 1.0f);
		
		return moveToolbarAction;
	}

	@AutoGenerated
	private VerticalLayout buildEditToolBarAction() {
		// common part: create layout
		editToolBarAction = new VerticalLayout();
		editToolBarAction.setImmediate(false);
		editToolBarAction.setWidth("50px");
		editToolBarAction.setHeight("100.0%");
		editToolBarAction.setMargin(false);
		
		// aux2LayoutAction
		aux2LayoutAction = new VerticalLayout();
		aux2LayoutAction.setImmediate(false);
		aux2LayoutAction.setWidth("100.0%");
		aux2LayoutAction.setHeight("50px");
		aux2LayoutAction.setMargin(false);
		editToolBarAction.addComponent(aux2LayoutAction);
		
		// btnAddAction
		btnAddAction = new Button();
		btnAddAction.setIcon(new ThemeResource(
				"../konekti/images/icons/edition-toolbar/plus.png"));
		btnAddAction.setImmediate(true);
		btnAddAction.setWidth("100.0%");
		btnAddAction.setHeight("-1px");
		editToolBarAction.addComponent(btnAddAction);
		
		// btnEditAction
		btnEditAction = new Button();
		btnEditAction.setIcon(new ThemeResource(
				"../konekti/images/icons/edition-toolbar/pencil.png"));
		btnEditAction.setImmediate(true);
		btnEditAction.setWidth("100.0%");
		btnEditAction.setHeight("-1px");
		editToolBarAction.addComponent(btnEditAction);
		
		// btnRemoveAction
		btnRemoveAction = new Button();
		btnRemoveAction.setIcon(new ThemeResource(
				"../konekti/images/icons/edition-toolbar/minus.png"));
		btnRemoveAction.setImmediate(true);
		btnRemoveAction.setWidth("100.0%");
		btnRemoveAction.setHeight("-1px");
		editToolBarAction.addComponent(btnRemoveAction);
		editToolBarAction.setExpandRatio(btnRemoveAction, 1.0f);
		
		return editToolBarAction;
	}
	
}
