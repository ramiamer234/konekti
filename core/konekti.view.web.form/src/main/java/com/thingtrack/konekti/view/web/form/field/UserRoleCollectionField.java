package com.thingtrack.konekti.view.web.form.field;

import org.osgi.framework.BundleContext;
import org.osgi.framework.FrameworkUtil;
import org.osgi.framework.ServiceReference;

import org.vaadin.dialogs.ConfirmDialog;

import com.thingtrack.konekti.domain.Action;
import com.thingtrack.konekti.domain.Area;
import com.thingtrack.konekti.domain.MenuCommandResource;
import com.thingtrack.konekti.domain.Permission;
import com.thingtrack.konekti.domain.Role;
import com.thingtrack.konekti.domain.User;
import com.thingtrack.konekti.service.api.ActionService;
import com.thingtrack.konekti.service.api.PermissionService;
import com.thingtrack.konekti.service.api.RoleService;
import com.thingtrack.konekti.view.addon.ui.AbstractField;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.thingtrack.konekti.view.addon.ui.WindowDialog.DialogResult;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.web.form.ActionViewForm;
import com.thingtrack.konekti.view.web.form.PermissionViewForm;
import com.thingtrack.konekti.view.web.form.RoleViewForm;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Window.Notification;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Select;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class UserRoleCollectionField extends AbstractField {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout valuesLayout;
	@AutoGenerated
	private HorizontalLayout actionLayout;
	@AutoGenerated
	private VerticalLayout editToolBarAction;
	@AutoGenerated
	private Button btnRemoveAction;
	@AutoGenerated
	private Button btnEditAction;
	@AutoGenerated
	private Button btnAddAction;
	@AutoGenerated
	private VerticalLayout aux2LayoutAction;
	@AutoGenerated
	private Table tbAvailableAction;
	@AutoGenerated
	private VerticalLayout moveToolbarAction;
	@AutoGenerated
	private Button btnSetAllAction;
	@AutoGenerated
	private Button btnSetAction;
	@AutoGenerated
	private Button btnUnsetAction;
	@AutoGenerated
	private Button btnUnsetAllAction;
	@AutoGenerated
	private VerticalLayout auxLayoutAction;
	@AutoGenerated
	private Table tbActiveAction;
	@AutoGenerated
	private HorizontalLayout permissionLayout;
	@AutoGenerated
	private VerticalLayout editToolBarPermission;
	@AutoGenerated
	private Button btnRemovePermission;
	@AutoGenerated
	private Button btnEditPermission;
	@AutoGenerated
	private Button btnAddPermission;
	@AutoGenerated
	private VerticalLayout aux2LayoutPermission;
	@AutoGenerated
	private Table tbAvailablePermission;
	@AutoGenerated
	private VerticalLayout moveToolbarPermission;
	@AutoGenerated
	private Button btnSetAllPermission;
	@AutoGenerated
	private Button btnSetPermission;
	@AutoGenerated
	private Button btnUnsetPermission;
	@AutoGenerated
	private Button btnUnsetAllPermission;
	@AutoGenerated
	private VerticalLayout auxLayoutPermission;
	@AutoGenerated
	private Table tbActivePermission;
	@AutoGenerated
	private HorizontalLayout roleLayout;
	@AutoGenerated
	private Button btnApply;
	@AutoGenerated
	private Button btnCopyRole;
	@AutoGenerated
	private Button btnRemoveRole;
	@AutoGenerated
	private Button btnEditRole;
	@AutoGenerated
	private Button btnAddRole;
	@AutoGenerated
	private ComboBox cmbRoles;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private RoleService roleService;
	private PermissionService permissionService;
	private ActionService actionService;
	
	private BeanItemContainer<Role> dsUserRole = new BeanItemContainer<Role>(Role.class);
	private BeanItemContainer<Permission> dsActivePermission = new BeanItemContainer<Permission>(Permission.class);
	private BeanItemContainer<Permission> dsAvailablePermission = new BeanItemContainer<Permission>(Permission.class);
	private BeanItemContainer<Action> dsActiveAction = new BeanItemContainer<Action>(Action.class);
	private BeanItemContainer<Action> dsAvailableAction = new BeanItemContainer<Action>(Action.class);
	
	private User user;
	
	private IWorkbenchContext context;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public UserRoleCollectionField() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		getServices();
		
		btnApply.setEnabled(false);
		
		// set all buttons to visible false
		btnSetAllPermission.setVisible(false);
		btnUnsetAllPermission.setVisible(false);
		btnUnsetAllAction.setVisible(false);
		btnSetAllAction.setVisible(false);
		
		// initialize Components
		initialize();
		
		// set Component handlers
		setRoleHandler();
		setPermissionHandler();
		
		setPermissionButtonHandlers();
		setActionButtonHandlers();

	}
		
	private void initialize() {
		try {
			cmbRoles.setImmediate(true);			
			cmbRoles.setContainerDataSource(dsUserRole);
			cmbRoles.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
			cmbRoles.setItemCaptionPropertyId("description");
			
			// not deselected a selected register
			tbActivePermission.setNullSelectionAllowed(false);		
			tbActivePermission.setColumnCollapsingAllowed(true);
			tbActivePermission.setSelectable(true);
			//tbActivePermission.setMultiSelect(true);
			tbActivePermission.setImmediate(true);		
			dsActivePermission.addNestedContainerProperty("menuCommandResource.caption");
			tbActivePermission.setContainerDataSource(dsActivePermission);
			tbActivePermission.setVisibleColumns(new String[] { "code", "description", "comment", "menuCommandResource.caption" } );       
			tbActivePermission.setColumnHeaders(new String[] { "Codigo", "Descripcion", "Comentarios", "Modulo" } );
			tbActivePermission.setColumnCollapsed("code", true);
			tbActivePermission.setColumnCollapsed("comment", true);
			tbActivePermission.setColumnCollapsed("menuCommandResource.caption", true);
			
			tbAvailablePermission.setNullSelectionAllowed(false);		
			tbAvailablePermission.setColumnCollapsingAllowed(true);
			tbAvailablePermission.setSelectable(true);
			//tbAvailablePermission.setMultiSelect(true);
			tbAvailablePermission.setImmediate(true);	
			dsAvailablePermission.addNestedContainerProperty("menuCommandResource.caption");
			tbAvailablePermission.setContainerDataSource(dsAvailablePermission);
			tbAvailablePermission.setVisibleColumns(new String[] { "code", "description", "comment", "menuCommandResource.caption" } );       
			tbAvailablePermission.setColumnHeaders(new String[] { "Codigo", "Descripcion", "Comentarios", "Modulo" } );
			tbAvailablePermission.setColumnCollapsed("code", true);
			tbAvailablePermission.setColumnCollapsed("comment", true);
			tbAvailablePermission.setColumnCollapsed("menuCommandResource.caption", true);
			
			tbActiveAction.setNullSelectionAllowed(false);		
			tbActiveAction.setColumnCollapsingAllowed(true);
			tbActiveAction.setSelectable(true);
			//tbActiveAction.setMultiSelect(true);
			tbActiveAction.setImmediate(true);
			tbActiveAction.setContainerDataSource(dsActiveAction);
			tbActiveAction.setVisibleColumns(new String[] { "code", "description", "comment" } );       
			tbActiveAction.setColumnHeaders(new String[] { "Codigo", "Descripcion", "Comentarios" } );
			tbActiveAction.setColumnCollapsed("code", true);
			tbActiveAction.setColumnCollapsed("comment", true);
			
			tbAvailableAction.setNullSelectionAllowed(false);		
			tbAvailableAction.setColumnCollapsingAllowed(true);
			tbAvailableAction.setSelectable(true);
			//tbAvailableAction.setMultiSelect(true);
			tbAvailableAction.setImmediate(true);
			tbAvailableAction.setContainerDataSource(dsAvailableAction);
			tbAvailableAction.setVisibleColumns(new String[] { "code", "description", "comment" } );       
			tbAvailableAction.setColumnHeaders(new String[] { "Codigo", "Descripcion", "Comentarios" } );
			tbAvailableAction.setColumnCollapsed("code", true);
			tbAvailableAction.setColumnCollapsed("comment", true);
		}
		catch(Exception e) {
			throw new RuntimeException("Â¡Error al crear los Compinentes de Roles!", e);
		}
		
	}
	
	public void setContext(IWorkbenchContext context) {
		this.context = context;
	}
	
	private void refreshRoleDataGridView(Role roleSaved) {
		if (dsUserRole.containsId(roleSaved)) {
			Role previousRole = dsUserRole.prevItemId(roleSaved);

			dsUserRole.removeItem(roleSaved);
			dsUserRole.addItemAfter(previousRole, roleSaved);
			dsUserRole.lastItemId();
		} else
			dsUserRole.addItem(roleSaved);

	}
	
	private void refreshPermissionDataGridView(Permission permissionSaved) {
		if (dsAvailablePermission.containsId(permissionSaved)) {
			Permission previousPermission = dsAvailablePermission.prevItemId(permissionSaved);

			dsAvailablePermission.removeItem(permissionSaved);
			dsAvailablePermission.addItemAfter(previousPermission, permissionSaved);
			dsAvailablePermission.lastItemId();
		} else
			dsAvailablePermission.addItem(permissionSaved);

	}
	
	private void refreshActionDataGridView(Action actionSaved) {
		if (dsAvailableAction.containsId(actionSaved)) {
			Action previousAction = dsAvailableAction.prevItemId(actionSaved);

			dsAvailableAction.removeItem(actionSaved);
			dsAvailableAction.addItemAfter(previousAction, actionSaved);
			dsAvailableAction.lastItemId();
		} else
			dsAvailableAction.addItem(actionSaved);

	}
	
	private void setRoleHandler() {
		btnAddRole.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				Role role = null;
				try {
					role = roleService.createNewEntity(context.getUser().getActiveArea());
				} catch (Exception e) {
					throw new RuntimeException(
							"Â¡No se pudo crear el nuevo cÃ³digo rol!",
							e);
				}	
				
				try {
					@SuppressWarnings("unused")
					WindowDialog<Role> windowDialog = new WindowDialog<Role>(
							getApplication().getMainWindow(), "Nuevo Rol", "Guardar", DialogResult.SAVE,
							"Cancelar", DialogResult.CANCEL, new RoleViewForm(), role,
							new WindowDialog.CloseWindowDialogListener<Role>() {
								public void windowDialogClose(
										WindowDialog<Role>.CloseWindowDialogEvent<Role> event) {
									if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
										return;

									try {
										Role savingRole = event.getDomainEntity();

										Role savedRole = roleService.save(savingRole);

										refreshRoleDataGridView(savedRole);
									} catch (Exception e) {
										throw new RuntimeException(
												"Â¡No se pudo crear el nuevo rol!",
												e);

									}
								}

							});
				} catch (IllegalArgumentException e) {
					throw new RuntimeException(
							"Â¡No se pudo abrir el formulario Nuevo Rol!", e);
				} catch (Exception e) {
					throw new RuntimeException(
							"Â¡No se pudo abrir el formulario Nuevo Rol!", e);
				}

				
			}
		});
		
		btnEditRole.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				Role editingRole = (Role) cmbRoles.getValue();

				try {
					@SuppressWarnings("unused")
					WindowDialog<Role> windowDialog = new WindowDialog<Role>(
							getApplication().getMainWindow(), "Editor Cliente", "Guardar",
							DialogResult.SAVE, "Cancelar", DialogResult.CANCEL,
							new RoleViewForm(), editingRole,
							new WindowDialog.CloseWindowDialogListener<Role>() {
								public void windowDialogClose(
										WindowDialog<Role>.CloseWindowDialogEvent<Role> event) {
									if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
										return;

									try {
										Role savingRole = event.getDomainEntity();

										Role savedRole = roleService.save(savingRole);

										refreshRoleDataGridView(savedRole);

									} catch (Exception e) {
										throw new RuntimeException(
												"Â¡No se pudo modificar el rol!", e);

									}
								}

							});
				} catch (IllegalArgumentException e) {
					throw new RuntimeException(
							"Â¡No se pudo abrir el formulario Editor Rol!", e);
				} catch (Exception e) {
					throw new RuntimeException(
							"Â¡No se pudo abrir el formulario Editor Rol!", e);
				}
				
			}
		});
		
		btnRemoveRole.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				final Role editingRole = (Role) cmbRoles.getValue();

				if (editingRole == null)
					return;

				ConfirmDialog.show(getApplication().getMainWindow(), "Borrar Rol", "Â¿EstÃ¡s seguro?",
						"Si", "No", new ConfirmDialog.Listener() {

							public void onClose(ConfirmDialog dialog) {
								if (dialog.isConfirmed()) {
									try {										
										roleService.delete(editingRole);

										dsUserRole.removeItem(editingRole);

									} catch (IllegalArgumentException e) {
										throw new RuntimeException(
												"Â¡No se pudo borrar el rol!", e);
									} catch (Exception e) {
										throw new RuntimeException(
												"Â¡No se pudo borrar el rol!", e);
									}
								}
							}
						});
				
			}
		});
		
		btnApply.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// set the new rol to the user for the active area
				for (Role role : user.getRoles()) {
					//if (role.getArea().equals(user.getDefaultArea())) {
					if (role.getArea().getAreaId() == context.getUser().getActiveArea().getAreaId()) {
						user.getRoles().remove(role);
						break;
					}
				}
				
				if (cmbRoles.getValue() != null) 
					user.getRoles().add((Role) cmbRoles.getValue());
				
			
				btnApply.setEnabled(false);
			}
		});
		
		btnCopyRole.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// get active role from list
				final Role roleActive = (Role) cmbRoles.getValue();
				
				if (roleActive == null)
					return;
				
				// create a copy Role
				Role roleCopy = null;
				try {
					roleCopy = roleService.createNewEntity(context.getUser().getActiveArea());
				} catch (Exception e) {
					throw new RuntimeException(
							"Â¡No se pudo crear el nuevo rol!",
							e);
				}	
			
				try {
					@SuppressWarnings("unused")
					WindowDialog<Role> windowDialog = new WindowDialog<Role>(
							getApplication().getMainWindow(), "Nuevo Rol", "Guardar", DialogResult.SAVE,
							"Cancelar", DialogResult.CANCEL, new RoleViewForm(), roleCopy,
							new WindowDialog.CloseWindowDialogListener<Role>() {
								public void windowDialogClose(
										WindowDialog<Role>.CloseWindowDialogEvent<Role> event) {
									if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
										return;

									try {
										// get saving Rol form form
										Role savingRoleCopy = event.getDomainEntity();

										// copy all permission from active role to the new role add a default Description
										for (Permission permission : roleActive.getPermissions()) {
											Permission copyPermission = null;
											try {
												copyPermission = permissionService.createNewEntity();
												copyPermission.setDescription("COPY_" + permission.getDescription());
												copyPermission.setMenuCommandResource(permission.getMenuCommandResource());
												
												for (Action action : permission.getActions())
													copyPermission.getActions().add(action);
												
													
											} catch (Exception e) {
												throw new RuntimeException(
														"Â¡No se pudo copiar el nuevo permiso " + permission.getDescription() + "!",
														e);
											}
											
											savingRoleCopy.getPermissions().add(copyPermission);
										}
										
										Role savedRoleCopy = roleService.save(savingRoleCopy);

										refreshRoleDataGridView(savedRoleCopy);
									} catch (Exception e) {
										throw new RuntimeException(
												"Â¡No se pudo copiar el nuevo rol!",
												e);

									}
								}

							});
				} catch (IllegalArgumentException e) {
					throw new RuntimeException(
							"Â¡No se pudo abrir el formulario Nuevo Rol!", e);
				} catch (Exception e) {
					throw new RuntimeException(
							"Â¡No se pudo abrir el formulario Nuevo Rol!", e);
				}
								
			}
		});
		
		cmbRoles.addListener(new ValueChangeListener() {			
			@Override
			public void valueChange(com.vaadin.data.Property.ValueChangeEvent event) {
				if (event.getProperty().getValue() != null) {
					refreshActivePermissionDataSource((Role) event.getProperty().getValue());				
					refreshAvailablePermissionDataSource((Role) event.getProperty().getValue());
				}
				else {
					dsActivePermission.removeAllItems();
					dsAvailablePermission.removeAllItems();
					dsActiveAction.removeAllItems();
					dsAvailableAction.removeAllItems();
				}
				
				// select the first register on the active and available tables
				if (dsActivePermission.size() > 0)
					tbActivePermission.select(dsActivePermission.getIdByIndex(0));
										
				if (dsAvailablePermission.size() > 0)
					tbAvailablePermission.select(dsAvailablePermission.getIdByIndex(0));
				
				btnApply.setEnabled(true);
					
			}
		});
		
	}
	
	private void setPermissionHandler() {
		tbActivePermission.addListener(new ValueChangeListener() {			
			@Override
			public void valueChange(
					com.vaadin.data.Property.ValueChangeEvent event) {
				if (event.getProperty().getValue() == null)
					return;
				
				refreshActiveActionDataSource((Permission) event.getProperty().getValue());
				refreshAvailableActionDataSource((Permission) event.getProperty().getValue());
				
				// select the first register on the active and available table
				if (dsActiveAction.size() > 0)
					tbActiveAction.select(dsActiveAction.getIdByIndex(0));
				
				if (dsAvailableAction.size() > 0)
					tbAvailableAction.select(dsAvailableAction.getIdByIndex(0));
				
			}
		});
		
		tbAvailablePermission.addListener(new ValueChangeListener() {			
			@Override
			public void valueChange(
					com.vaadin.data.Property.ValueChangeEvent event) {
				if (event.getProperty().getValue() == null)
					return;
				
				refreshActiveActionDataSource((Permission) event.getProperty().getValue());
				refreshAvailableActionDataSource((Permission) event.getProperty().getValue());
				
				// select the first register on the active and available table
				if (dsActiveAction.size() > 0)
					tbActiveAction.select(dsActiveAction.getIdByIndex(0));
				
				if (dsAvailableAction.size() > 0)
					tbAvailableAction.select(dsAvailableAction.getIdByIndex(0));
				
			}
		});
	}
	
	private void setPermissionButtonHandlers() {
		btnUnsetAllPermission.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				Permission permissionSelected = (Permission)tbActivePermission.getValue();
				
				if (permissionSelected == null)
					return;
				
			}
		});
		
		btnUnsetPermission.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// get active Role from list
				Role roleActive = (Role)cmbRoles.getValue();
				
				if (roleActive == null)
					return;
				
				// get active Permission from table
				Permission permissionActive = (Permission)tbActivePermission.getValue();
				
				if (permissionActive == null)
					return;
																
				try {
					// remove permission from active rol permissions
					roleActive.getPermissions().remove(permissionActive);					
					roleService.save(roleActive);
					
					// move permission from active to available table
					dsActivePermission.removeItem(permissionActive);
					dsAvailablePermission.addItem(permissionActive);
				} catch (Exception e) {
					throw new RuntimeException("Â¡No se pudo desinstalar el permiso activo!", e);
				}
			}
		});
		
		btnSetAllPermission.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				Permission permissionSelected = (Permission)tbAvailablePermission.getValue();
			
				if (permissionSelected == null)
					return;
			}
		});
		
		btnSetPermission.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// get active role from list
				Role roleActive = (Role)cmbRoles.getValue();
				
				if (roleActive == null)
					return;
								
				// get available permission from table 
				Permission permissionAvailable = (Permission)tbAvailablePermission.getValue();
				
				if (permissionAvailable == null)
					return;
					
				
				if (existPermissionFromCommand(permissionAvailable.getMenuCommandResource())) {
					getWindow().showNotification("Ya existe un permiso para el comando " + permissionAvailable.getMenuCommandResource().getCaption(), Notification.TYPE_WARNING_MESSAGE);
					
					return;
				}
					
				try {
					// remove permission from active rol permissions
					roleActive.getPermissions().add(permissionAvailable);
					roleService.save(roleActive);
				
					// move the permission from available to active table					
					dsActivePermission.addItem(permissionAvailable);
					dsAvailablePermission.removeItem(permissionAvailable);
				} catch (Exception e) {
					throw new RuntimeException("Â¡No se pudo instalar el permiso disponible!", e);
				}
			}
		});		
					
		btnAddPermission.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				Permission permission = null;
				try {
					permission = permissionService.createNewEntity();
				} catch (Exception e) {
					throw new RuntimeException(
							"Â¡No se pudo crear el nuevo permiso!",
							e);
				}	
				
				try {
					@SuppressWarnings("unused")
					WindowDialog<Permission> windowDialog = new WindowDialog<Permission>(
							getApplication().getMainWindow(), "Nuevo Permiso", "Guardar", DialogResult.SAVE,
							"Cancelar", DialogResult.CANCEL, new PermissionViewForm(), permission,
							new WindowDialog.CloseWindowDialogListener<Permission>() {
								public void windowDialogClose(
										WindowDialog<Permission>.CloseWindowDialogEvent<Permission> event) {
									if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
										return;

									try {
										Permission savingPermission = event.getDomainEntity();

										Permission savedPermission = permissionService.save(savingPermission);

										refreshPermissionDataGridView(savedPermission);
									} catch (Exception e) {
										throw new RuntimeException(
												"Â¡No se pudo crear el nuevo permission!",
												e);

									}
								}

							});
				} catch (IllegalArgumentException e) {
					throw new RuntimeException(
							"Â¡No se pudo abrir el formulario Nuevo Permission!", e);
				} catch (Exception e) {
					throw new RuntimeException(
							"Â¡No se pudo abrir el formulario Nuevo Permission!", e);
				}
				
			}
		});
		
		btnEditPermission.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				Permission editingPermission = (Permission) tbAvailablePermission.getValue();

				try {
					@SuppressWarnings("unused")
					WindowDialog<Permission> windowDialog = new WindowDialog<Permission>(
							getApplication().getMainWindow(), "Editor Permiso", "Guardar",
							DialogResult.SAVE, "Cancelar", DialogResult.CANCEL,
							new PermissionViewForm(), editingPermission,
							new WindowDialog.CloseWindowDialogListener<Permission>() {
								public void windowDialogClose(
										WindowDialog<Permission>.CloseWindowDialogEvent<Permission> event) {
									if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
										return;

									try {
										Permission savingPermission = event.getDomainEntity();

										Permission savedPermission = permissionService.save(savingPermission);

										refreshPermissionDataGridView(savedPermission);

									} catch (Exception e) {
										throw new RuntimeException(
												"Â¡No se pudo modificar el permission!", e);

									}
								}

							});
				} catch (IllegalArgumentException e) {
					throw new RuntimeException(
							"Â¡No se pudo abrir el formulario Editor Permission!", e);
				} catch (Exception e) {
					throw new RuntimeException(
							"Â¡No se pudo abrir el formulario Editor Permission!", e);
				}
				
			}
		});
		
		btnRemovePermission.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				final Permission editingPermission = (Permission) tbAvailablePermission.getValue();

				if (editingPermission == null)
					return;

				ConfirmDialog.show(getApplication().getMainWindow(), "Borrar Permiso", "Â¿EstÃ¡s seguro?",
						"Si", "No", new ConfirmDialog.Listener() {

							public void onClose(ConfirmDialog dialog) {
								if (dialog.isConfirmed()) {
									try {
										permissionService.delete(editingPermission);

										dsAvailablePermission.removeItem(editingPermission);

									} catch (IllegalArgumentException e) {
										throw new RuntimeException(
												"Â¡No se pudo borrar el permiso!", e);
									} catch (Exception e) {
										throw new RuntimeException(
												"Â¡No se pudo borrar el permiso!", e);
									}
								}
							}
						});
				
			}
		});		
	}
	
	private void setActionButtonHandlers() {		
		btnUnsetAllAction.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				Action actionSelected = (Action)tbActiveAction.getValue();
				
				if (actionSelected == null)
					return;
				
			}
		});
		
		btnUnsetAction.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// get the active Action from table
				Action actionActive = (Action)tbActiveAction.getValue();
				
				if (actionActive == null)
					return;
				
				// get active Permission from table
				Permission permissionActive = (Permission)tbActivePermission.getValue();
				
				if (permissionActive == null)
					return;
																
				try {
					// remove action from active permission
					permissionActive.getActions().remove(actionActive);					
					permissionService.save(permissionActive);
					
					// move action from active to availabÃ±e action tables
					dsActiveAction.removeItem(actionActive);
					dsAvailableAction.addItem(actionActive);
				} catch (Exception e) {
					throw new RuntimeException("Â¡No se pudo desinstalar la acciÃ³n activa!", e);
				}			
				
			}
		});
		
		
		btnSetAllAction.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				Action actionSelected = (Action)tbAvailableAction.getValue();
				
				if (actionSelected == null)
					return;
				
			}
		});
		
		btnSetAction.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				// get available action from table
				Action actionAvailable = (Action)tbAvailableAction.getValue();
				
				if (actionAvailable == null)
					return;
								
				// get active Permission from table
				Permission permissionActive = (Permission)tbActivePermission.getValue();
				
				if (permissionActive == null)
					return;
																
				try {
					// remove action from active permission
					permissionActive.getActions().add(actionAvailable);					
					permissionService.save(permissionActive);
					
					// move action from active to availabÃ±e action tables
					dsActiveAction.addItem(actionAvailable);
					dsAvailableAction.removeItem(actionAvailable);
				} catch (Exception e) {
					throw new RuntimeException("Â¡No se pudo instalar la acciÃ³n activa!", e);
				}	
			}
		});
	
		btnAddAction.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				Action action = null;
				try {
					action = actionService.createNewEntity();
				} catch (Exception e) {
					throw new RuntimeException(
							"Â¡No se pudo crear el nueva acciÃ³n!",
							e);
				}	
				
				try {
					@SuppressWarnings("unused")
					WindowDialog<Action> windowDialog = new WindowDialog<Action>(
							getApplication().getMainWindow(), "Nuevo Permiso", "Guardar", DialogResult.SAVE,
							"Cancelar", DialogResult.CANCEL, new ActionViewForm(), action,
							new WindowDialog.CloseWindowDialogListener<Action>() {
								public void windowDialogClose(
										WindowDialog<Action>.CloseWindowDialogEvent<Action> event) {
									if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
										return;

									try {
										Action savingAction = event.getDomainEntity();

										Action savedAction = actionService.save(savingAction);

										refreshActionDataGridView(savedAction);
									} catch (Exception e) {
										throw new RuntimeException(
												"Â¡No se pudo crear el nuevo permission!",
												e);

									}
								}

							});
				} catch (IllegalArgumentException e) {
					throw new RuntimeException(
							"Â¡No se pudo abrir el formulario Nuevo Permission!", e);
				} catch (Exception e) {
					throw new RuntimeException(
							"Â¡No se pudo abrir el formulario Nuevo Permission!", e);
				}
				
			}
		});
		
		btnEditAction.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				Action editingAction = (Action) tbAvailableAction.getValue();

				try {
					@SuppressWarnings("unused")
					WindowDialog<Action> windowDialog = new WindowDialog<Action>(
							getApplication().getMainWindow(), "Editor Action", "Guardar",
							DialogResult.SAVE, "Cancelar", DialogResult.CANCEL,
							new ActionViewForm(), editingAction,
							new WindowDialog.CloseWindowDialogListener<Action>() {
								public void windowDialogClose(
										WindowDialog<Action>.CloseWindowDialogEvent<Action> event) {
									if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
										return;

									try {
										Action savingAction = event.getDomainEntity();

										Action savedAction = actionService.save(savingAction);

										refreshActionDataGridView(savedAction);

									} catch (Exception e) {
										throw new RuntimeException(
												"Â¡No se pudo modificar la acciÃ³n!", e);

									}
								}

							});
				} catch (IllegalArgumentException e) {
					throw new RuntimeException(
							"Â¡No se pudo abrir el formulario Editor AcciÃ³n!", e);
				} catch (Exception e) {
					throw new RuntimeException(
							"Â¡No se pudo abrir el formulario Editor AcciÃ³n!", e);
				}
				
			}
		});
		
		btnRemoveAction.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				final Action editingAction = (Action) tbAvailableAction.getValue();

				if (editingAction == null)
					return;

				ConfirmDialog.show(getApplication().getMainWindow(), "Borrar AcciÃ³n", "Â¿EstÃ¡s seguro?",
						"Si", "No", new ConfirmDialog.Listener() {

							public void onClose(ConfirmDialog dialog) {
								if (dialog.isConfirmed()) {
									try {
										actionService.delete(editingAction);

										dsAvailableAction.removeItem(editingAction);

									} catch (IllegalArgumentException e) {
										throw new RuntimeException(
												"Â¡No se pudo borrar la acciÃ³n!", e);
									} catch (Exception e) {
										throw new RuntimeException(
												"Â¡No se pudo borrar la acciÃ³n!", e);
									}
								}
							}
						});							
				
			}
		});		
	}
		
	@Override
	public Class<?> getType() {
		return User.class;
		
	}
	
	@Override
	public void setPropertyDataSource(Property newDataSource) {			
		super.setPropertyDataSource(newDataSource);

	}
	
	@Override
	public void setValue(Object object) {
		super.setValue(object);
		
		if(object instanceof User){
			user = (User)object;
			
			try {
				// fill all Area Roles
				dsUserRole.removeAllItems();
				dsUserRole.addAll(roleService.getAll(context.getUser().getActiveArea()));

				cmbRoles.setContainerDataSource(dsUserRole);
				
				// set active User Role in the active Area
				cmbRoles.setValue(getRoleFromUser(context.getUser().getActiveArea()));
			} catch (Exception e) {
				throw new RuntimeException("Â¡Error al recuperar los Roles Usuario!", e);
			}
			
		}
	}
	
	private void refreshActivePermissionDataSource(Role role) {
		try {		
			dsActivePermission.removeAllItems();
			dsActivePermission.addAll(role.getPermissions());			
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("Â¡No se pudo refrescar los Permisos Activos!", e);
		} catch (Exception e) {
			throw new RuntimeException("Â¡No se pudo refrescar los Permisos Activos!", e);
		}	
	}
	
	private void refreshAvailablePermissionDataSource(Role role) {
		dsAvailablePermission.removeAllItems();
		try {
			for (Permission permission : permissionService.getAllByRole(role)) {
				if (!role.getPermissions().contains(permission))
					dsAvailablePermission.addBean(permission);
			}
		} catch (Exception e) {
			throw new RuntimeException("Â¡No se pudo recoger todos los permisos!", e);
		}
		
	}
	
	private void refreshActiveActionDataSource(Permission permission) {
		try {		
			dsActiveAction.removeAllItems();
			dsActiveAction.addAll(permission.getActions());			
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("Â¡No se pudo refrescar los Acciones Activos!", e);
		} catch (Exception e) {
			throw new RuntimeException("Â¡No se pudo refrescar los Acciones Activos!", e);
		}	
	}
	
	private void refreshAvailableActionDataSource(Permission permission) {
		dsAvailableAction.removeAllItems();
		try {
			for (Action action : actionService.getAll()) {
				if (!permission.getActions().contains(action))
					dsAvailableAction.addBean(action);
			}
		} catch (Exception e) {
			throw new RuntimeException("Â¡No se pudo recoger todos las acciones!", e);
		}
	}
	
	private Role getRoleFromUser(Area area) {
		for (Role role : user.getRoles()) {
			if (role.getArea().getAreaId() == area.getAreaId())
				return role;
			
		}
		
		return null;
	}
	
	private boolean existPermissionFromCommand(MenuCommandResource command) {
		for (Permission permission : dsActivePermission.getItemIds()) {
			if (permission.getMenuCommandResource() != null && 
				permission.getMenuCommandResource().getMenuResourceId() == command.getMenuResourceId())
				return true;
		}
		
		return false;
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void getServices() {
		try {
			BundleContext bundleContext = FrameworkUtil.getBundle(UserRoleCollectionField.class).getBundleContext();
			
			ServiceReference roleServiceReference = bundleContext.getServiceReference(RoleService.class.getName());
			roleService = RoleService.class.cast(bundleContext.getService(roleServiceReference));

			ServiceReference permissionServiceReference = bundleContext.getServiceReference(PermissionService.class.getName());
			permissionService = PermissionService.class.cast(bundleContext.getService(permissionServiceReference));
			
			ServiceReference actionServiceReference = bundleContext.getServiceReference(ActionService.class.getName());
			actionService = ActionService.class.cast(bundleContext.getService(actionServiceReference));
			
		}
		catch (Exception e) {
			e.getMessage();
			
		}
		
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// roleLayout
		roleLayout = buildRoleLayout();
		mainLayout.addComponent(roleLayout);
		
		// valuesLayout
		valuesLayout = buildValuesLayout();
		mainLayout.addComponent(valuesLayout);
		mainLayout.setExpandRatio(valuesLayout, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildRoleLayout() {
		// common part: create layout
		roleLayout = new HorizontalLayout();
		roleLayout.setImmediate(false);
		roleLayout.setWidth("100.0%");
		roleLayout.setHeight("-1px");
		roleLayout.setMargin(false);
		
		// cmbRoles
		cmbRoles = new ComboBox();
		cmbRoles.setCaption("Roles:");
		cmbRoles.setImmediate(false);
		cmbRoles.setWidth("-1px");
		cmbRoles.setHeight("-1px");
		roleLayout.addComponent(cmbRoles);
		
		// btnAddRole
		btnAddRole = new Button();
		btnAddRole.setDescription("AÃ±adir Rol");
		btnAddRole.setIcon(new ThemeResource(
				"../konekti/images/icons/edition-toolbar/plus.png"));
		btnAddRole.setImmediate(true);
		btnAddRole.setWidth("-1px");
		btnAddRole.setHeight("-1px");
		roleLayout.addComponent(btnAddRole);
		roleLayout.setComponentAlignment(btnAddRole, new Alignment(9));
		
		// btnEditRole
		btnEditRole = new Button();
		btnEditRole.setDescription("Editar Rol");
		btnEditRole.setIcon(new ThemeResource(
				"../konekti/images/icons/edition-toolbar/pencil.png"));
		btnEditRole.setImmediate(true);
		btnEditRole.setWidth("-1px");
		btnEditRole.setHeight("-1px");
		roleLayout.addComponent(btnEditRole);
		roleLayout.setComponentAlignment(btnEditRole, new Alignment(9));
		
		// btnRemoveRole
		btnRemoveRole = new Button();
		btnRemoveRole.setDescription("Borrar Rol");
		btnRemoveRole.setIcon(new ThemeResource(
				"../konekti/images/icons/edition-toolbar/minus.png"));
		btnRemoveRole.setImmediate(true);
		btnRemoveRole.setWidth("-1px");
		btnRemoveRole.setHeight("-1px");
		roleLayout.addComponent(btnRemoveRole);
		roleLayout.setComponentAlignment(btnRemoveRole, new Alignment(9));
		
		// btnApply
		btnApply = new Button();
		btnApply.setDescription("Guardar cambios");
		btnApply.setCaption("Aplicar");
		btnApply.setImmediate(true);
		btnApply.setWidth("-1px");
		btnApply.setHeight("-1px");
		roleLayout.addComponent(btnApply);
		roleLayout.setComponentAlignment(btnApply, new Alignment(9));
		
		// btnCopyRole
		btnCopyRole = new Button();
		btnCopyRole.setCaption("Copiar");
		btnCopyRole.setDescription("Copiar acciÃ³n");
		btnCopyRole.setImmediate(true);
		btnCopyRole.setWidth("-1px");
		btnCopyRole.setHeight("-1px");
		roleLayout.addComponent(btnCopyRole);
		roleLayout.setExpandRatio(btnCopyRole, 1.0f);
		roleLayout.setComponentAlignment(btnCopyRole, new Alignment(9));		
		
		return roleLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildValuesLayout() {
		// common part: create layout
		valuesLayout = new HorizontalLayout();
		valuesLayout.setImmediate(false);
		valuesLayout.setWidth("100.0%");
		valuesLayout.setHeight("100.0%");
		valuesLayout.setMargin(false);
		valuesLayout.setSpacing(true);
		
		// permissionLayout
		permissionLayout = buildPermissionLayout();
		valuesLayout.addComponent(permissionLayout);
		
		// actionLayout
		actionLayout = buildActionLayout();
		valuesLayout.addComponent(actionLayout);
		
		return valuesLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildPermissionLayout() {
		// common part: create layout
		permissionLayout = new HorizontalLayout();
		permissionLayout.setImmediate(false);
		permissionLayout.setWidth("-1px");
		permissionLayout.setHeight("100.0%");
		permissionLayout.setMargin(false);
		
		// tbActivePermission
		tbActivePermission = new Table();
		tbActivePermission.setCaption("Permisos Activos");
		tbActivePermission.setImmediate(false);
		tbActivePermission.setWidth("180px");
		tbActivePermission.setHeight("100.0%");
		permissionLayout.addComponent(tbActivePermission);
		
		// moveToolbarPermission
		moveToolbarPermission = buildMoveToolbarPermission();
		permissionLayout.addComponent(moveToolbarPermission);
		
		// tbAvailablePermission
		tbAvailablePermission = new Table();
		tbAvailablePermission.setCaption("Permisos Disponibles");
		tbAvailablePermission.setImmediate(false);
		tbAvailablePermission.setWidth("180px");
		tbAvailablePermission.setHeight("100.0%");
		permissionLayout.addComponent(tbAvailablePermission);
		
		// editToolBarPermission
		editToolBarPermission = buildEditToolBarPermission();
		permissionLayout.addComponent(editToolBarPermission);
		
		return permissionLayout;
	}

	@AutoGenerated
	private VerticalLayout buildMoveToolbarPermission() {
		// common part: create layout
		moveToolbarPermission = new VerticalLayout();
		moveToolbarPermission.setImmediate(false);
		moveToolbarPermission.setWidth("50px");
		moveToolbarPermission.setHeight("100.0%");
		moveToolbarPermission.setMargin(false);
		
		// auxLayoutPermission
		auxLayoutPermission = new VerticalLayout();
		auxLayoutPermission.setImmediate(false);
		auxLayoutPermission.setWidth("100.0%");
		auxLayoutPermission.setHeight("50px");
		auxLayoutPermission.setMargin(false);
		moveToolbarPermission.addComponent(auxLayoutPermission);
		
		// btnUnsetAllPermission
		btnUnsetAllPermission = new Button();
		btnUnsetAllPermission.setDescription("Desinstalar todas los permisos");
		btnUnsetAllPermission.setIcon(new ThemeResource(
				"../konekti/images/icons/role-component/control-double.png"));
		btnUnsetAllPermission.setImmediate(true);
		btnUnsetAllPermission.setWidth("100.0%");
		btnUnsetAllPermission.setHeight("-1px");
		moveToolbarPermission.addComponent(btnUnsetAllPermission);
		
		// btnUnsetPermission
		btnUnsetPermission = new Button();
		btnUnsetPermission.setDescription("Desinstalar permiso");
		btnUnsetPermission.setIcon(new ThemeResource(
				"../konekti/images/icons/role-component/control.png"));
		btnUnsetPermission.setImmediate(true);
		btnUnsetPermission.setWidth("100.0%");
		btnUnsetPermission.setHeight("-1px");
		moveToolbarPermission.addComponent(btnUnsetPermission);
		
		// btnSetPermission
		btnSetPermission = new Button();
		btnSetPermission.setDescription("Instalar permiso");
		btnSetPermission.setIcon(new ThemeResource(
				"../konekti/images/icons/role-component/control-180.png"));
		btnSetPermission.setImmediate(true);
		btnSetPermission.setWidth("100.0%");
		btnSetPermission.setHeight("-1px");
		moveToolbarPermission.addComponent(btnSetPermission);
		
		// btnSetAllPermission
		btnSetAllPermission = new Button();
		btnSetAllPermission.setDescription("Instalar todos los permisos");
		btnSetAllPermission
				.setIcon(new ThemeResource(
						"../konekti/images/icons/role-component/control-double-180.png"));
		btnSetAllPermission.setImmediate(true);
		btnSetAllPermission.setWidth("100.0%");
		btnSetAllPermission.setHeight("-1px");
		moveToolbarPermission.addComponent(btnSetAllPermission);
		moveToolbarPermission.setExpandRatio(btnSetAllPermission, 1.0f);
		
		return moveToolbarPermission;
	}

	@AutoGenerated
	private VerticalLayout buildEditToolBarPermission() {
		// common part: create layout
		editToolBarPermission = new VerticalLayout();
		editToolBarPermission.setImmediate(false);
		editToolBarPermission.setWidth("50px");
		editToolBarPermission.setHeight("100.0%");
		editToolBarPermission.setMargin(false);
		
		// aux2LayoutPermission
		aux2LayoutPermission = new VerticalLayout();
		aux2LayoutPermission.setImmediate(false);
		aux2LayoutPermission.setWidth("100.0%");
		aux2LayoutPermission.setHeight("50px");
		aux2LayoutPermission.setMargin(false);
		editToolBarPermission.addComponent(aux2LayoutPermission);
		
		// btnAddPermission
		btnAddPermission = new Button();
		btnAddPermission.setDescription("AÃ±adir permiso");
		btnAddPermission.setIcon(new ThemeResource(
				"../konekti/images/icons/edition-toolbar/plus.png"));
		btnAddPermission.setImmediate(true);
		btnAddPermission.setWidth("100.0%");
		btnAddPermission.setHeight("-1px");
		editToolBarPermission.addComponent(btnAddPermission);
		
		// btnEditPermission
		btnEditPermission = new Button();
		btnEditPermission.setDescription("Editar permiso");
		btnEditPermission.setIcon(new ThemeResource(
				"../konekti/images/icons/edition-toolbar/pencil.png"));
		btnEditPermission.setImmediate(true);
		btnEditPermission.setWidth("100.0%");
		btnEditPermission.setHeight("-1px");
		editToolBarPermission.addComponent(btnEditPermission);
		
		// btnRemovePermission
		btnRemovePermission = new Button();
		btnRemovePermission.setDescription("Borrar permiso");
		btnRemovePermission.setIcon(new ThemeResource(
				"../konekti/images/icons/edition-toolbar/minus.png"));
		btnRemovePermission.setImmediate(true);
		btnRemovePermission.setWidth("100.0%");
		btnRemovePermission.setHeight("-1px");
		editToolBarPermission.addComponent(btnRemovePermission);
		editToolBarPermission.setExpandRatio(btnRemovePermission, 1.0f);
		
		return editToolBarPermission;
	}

	@AutoGenerated
	private HorizontalLayout buildActionLayout() {
		// common part: create layout
		actionLayout = new HorizontalLayout();
		actionLayout.setImmediate(false);
		actionLayout.setWidth("-1px");
		actionLayout.setHeight("100.0%");
		actionLayout.setMargin(false);
		
		// tbActiveAction
		tbActiveAction = new Table();
		tbActiveAction.setCaption("Acciones Activos");
		tbActiveAction.setImmediate(false);
		tbActiveAction.setWidth("180px");
		tbActiveAction.setHeight("100.0%");
		actionLayout.addComponent(tbActiveAction);
		
		// moveToolbarAction
		moveToolbarAction = buildMoveToolbarAction();
		actionLayout.addComponent(moveToolbarAction);
		
		// tbAvailableAction
		tbAvailableAction = new Table();
		tbAvailableAction.setCaption("Acciones Disponibles");
		tbAvailableAction.setImmediate(false);
		tbAvailableAction.setWidth("180px");
		tbAvailableAction.setHeight("100.0%");
		actionLayout.addComponent(tbAvailableAction);
		
		// editToolBarAction
		editToolBarAction = buildEditToolBarAction();
		actionLayout.addComponent(editToolBarAction);
		
		return actionLayout;
	}

	@AutoGenerated
	private VerticalLayout buildMoveToolbarAction() {
		// common part: create layout
		moveToolbarAction = new VerticalLayout();
		moveToolbarAction.setImmediate(false);
		moveToolbarAction.setWidth("50px");
		moveToolbarAction.setHeight("100.0%");
		moveToolbarAction.setMargin(false);
		
		// auxLayoutAction
		auxLayoutAction = new VerticalLayout();
		auxLayoutAction.setImmediate(false);
		auxLayoutAction.setWidth("100.0%");
		auxLayoutAction.setHeight("50px");
		auxLayoutAction.setMargin(false);
		moveToolbarAction.addComponent(auxLayoutAction);
		
		// btnUnsetAllAction
		btnUnsetAllAction = new Button();
		btnUnsetAllAction.setDescription("Desinstalar todas las acciones");
		btnUnsetAllAction.setIcon(new ThemeResource(
				"../konekti/images/icons/role-component/control-double.png"));
		btnUnsetAllAction.setImmediate(true);
		btnUnsetAllAction.setWidth("100.0%");
		btnUnsetAllAction.setHeight("-1px");
		moveToolbarAction.addComponent(btnUnsetAllAction);
		
		// btnUnsetAction
		btnUnsetAction = new Button();
		btnUnsetAction.setDescription("Desinstalar acciÃ³n");
		btnUnsetAction.setIcon(new ThemeResource(
				"../konekti/images/icons/role-component/control.png"));
		btnUnsetAction.setImmediate(true);
		btnUnsetAction.setWidth("100.0%");
		btnUnsetAction.setHeight("-1px");		
		moveToolbarAction.addComponent(btnUnsetAction);
		
		// btnSetAction
		btnSetAction = new Button();
		btnSetAction.setDescription("Instalar acciÃ³n");
		btnSetAction.setIcon(new ThemeResource(
				"../konekti/images/icons/role-component/control-180.png"));
		btnSetAction.setImmediate(true);
		btnSetAction.setWidth("100.0%");
		btnSetAction.setHeight("-1px");
		moveToolbarAction.addComponent(btnSetAction);
		
		// btnSetAllAction
		btnSetAllAction = new Button();
		btnSetAllAction.setDescription("Instalar todas las acciones");
		btnSetAllAction
				.setIcon(new ThemeResource(
						"../konekti/images/icons/role-component/control-double-180.png"));
		btnSetAllAction.setImmediate(true);
		btnSetAllAction.setWidth("100.0%");
		btnSetAllAction.setHeight("-1px");
		moveToolbarAction.addComponent(btnSetAllAction);
		moveToolbarAction.setExpandRatio(btnSetAllAction, 1.0f);
		
		return moveToolbarAction;
	}

	@AutoGenerated
	private VerticalLayout buildEditToolBarAction() {
		// common part: create layout
		editToolBarAction = new VerticalLayout();
		editToolBarAction.setImmediate(false);
		editToolBarAction.setWidth("50px");
		editToolBarAction.setHeight("100.0%");
		editToolBarAction.setMargin(false);
		
		// aux2LayoutAction
		aux2LayoutAction = new VerticalLayout();
		aux2LayoutAction.setImmediate(false);
		aux2LayoutAction.setWidth("100.0%");
		aux2LayoutAction.setHeight("50px");
		aux2LayoutAction.setMargin(false);
		editToolBarAction.addComponent(aux2LayoutAction);
		
		// btnAddAction
		btnAddAction = new Button();
		btnAddAction.setDescription("AÃ±adir acciÃ³n");
		btnAddAction.setIcon(new ThemeResource(
				"../konekti/images/icons/edition-toolbar/plus.png"));
		btnAddAction.setImmediate(true);
		btnAddAction.setWidth("100.0%");
		btnAddAction.setHeight("-1px");
		editToolBarAction.addComponent(btnAddAction);
		
		// btnEditAction
		btnEditAction = new Button();
		btnEditAction.setDescription("Editar acciÃ³n");
		btnEditAction.setIcon(new ThemeResource(
				"../konekti/images/icons/edition-toolbar/pencil.png"));
		btnEditAction.setImmediate(true);
		btnEditAction.setWidth("100.0%");
		btnEditAction.setHeight("-1px");
		editToolBarAction.addComponent(btnEditAction);
		
		// btnRemoveAction
		btnRemoveAction = new Button();
		btnRemoveAction.setDescription("Borrar acciÃ³n");
		btnRemoveAction.setIcon(new ThemeResource(
				"../konekti/images/icons/edition-toolbar/minus.png"));
		btnRemoveAction.setImmediate(true);
		btnRemoveAction.setWidth("100.0%");
		btnRemoveAction.setHeight("-1px");
		editToolBarAction.addComponent(btnRemoveAction);		
		editToolBarAction.setExpandRatio(btnRemoveAction, 1.0f);		
		
		return editToolBarAction;
	}

	@Override
	protected void updateLabels() {
		tbActivePermission.setColumnHeaders(new String[] { getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.tbActivePermission.column.code"), 
				   getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.tbActivePermission.column.description"), 
				   getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.tbActivePermission.column.comment"),
				   getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.tbActivePermission.column.module")});
		tbAvailablePermission.setColumnHeaders(new String[] { getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.tbAvailablePermission.column.code"), 
				   getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.tbAvailablePermission.column.description"), 
				   getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.tbAvailablePermission.column.comment"),
				   getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.tbAvailablePermission.column.module")});
		tbActiveAction.setColumnHeaders(new String[] { getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.tbActiveAction.column.code"), 
				   getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.tbActiveAction.column.description"), 
				   getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.tbActiveAction.column.comment")});
		tbAvailableAction.setColumnHeaders(new String[] { getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.tbAvailableAction.column.code"), 
				   getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.tbAvailableAction.column.description"), 
				   getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.tbAvailableAction.column.comment")});
		
		cmbRoles.setCaption(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.cmbRoles.caption"));
		btnAddRole.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnAddRole.description"));
		btnEditRole.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnEditRole.description"));
		btnRemoveRole.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnRemoveRole.description"));
		btnApply.setCaption(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnApply.caption"));
		btnApply.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnApply.description"));
		btnCopyRole.setCaption(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnCopyRole.caption"));
		btnCopyRole.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnCopyRole.description"));
		tbActivePermission.setCaption(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.tbActivePermission.caption"));
		tbAvailablePermission.setCaption(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.tbAvailablePermission.caption"));
		btnUnsetAllPermission.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnUnsetAllPermission.description"));
		btnUnsetPermission.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnUnsetPermission.description"));
		btnSetPermission.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnSetPermission.description"));
		btnSetAllPermission.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnSetAllPermission.description"));
		btnAddPermission.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnAddPermission.description"));
		btnEditPermission.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnEditPermission.description"));
		btnRemovePermission.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnRemovePermission.description"));
		tbActiveAction.setCaption(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.tbActiveAction.caption"));
		tbAvailableAction.setCaption(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.tbAvailableAction.caption"));
		btnUnsetAllAction.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnUnsetAllAction.description"));
		btnUnsetAction.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnUnsetAction.description"));
		btnSetAction.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnSetAction.description"));
		btnSetAllAction.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnSetAllAction.description"));
		btnAddAction.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnAddAction.description"));
		btnEditAction.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnEditAction.description"));
		btnRemoveAction.setDescription(getI18N().getMessage("com.thingtrack.konekti.view.web.form.field.UserRoleCollectionField.btnRemoveAction.description"));
	}
	
}
