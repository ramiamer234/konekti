package com.thingtrack.konekti.view.module.integration.addon;

import java.io.Serializable;
import java.util.Arrays;

import org.vaadin.peter.buttongroup.ButtonGroup;

import com.github.peholmst.i18n4vaadin.I18N;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.data.BindingSource.IndexChangeEvent;
import com.thingtrack.konekti.view.addon.data.BindingSource.IndexChangeListener;
import com.thingtrack.konekti.view.addon.ui.AbstractToolbar;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.thingtrack.konekti.view.module.integration.internal.Protocol;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.terminal.gwt.client.MouseEventDetails;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.ComponentContainer;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Select;
import com.vaadin.data.Property.ValueChangeListener;
import com.thingtrack.konekti.view.module.integration.internal.Protocol.DIRECTION;

@SuppressWarnings("serial")
public class ProtocolToolbar extends AbstractToolbar {
	@AutoGenerated
	private HorizontalLayout toolbarLayout;

	@AutoGenerated
	private Button btnOpenProtocol;
	@AutoGenerated
	private Button btnRecoverProtocol;
	@AutoGenerated
	private Label lblTypeProtocol;
	@AutoGenerated
	private ComboBox cmbTypeProtocol;
	@AutoGenerated
	private Label lblBoxProtocol;	
	@AutoGenerated
	private ComboBox cmbBoxProtocol;
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private Object register;	
	private int position = 0;			
	private IViewContainer viewContainer;
	private static I18N i18N;
	
	// navigator button listeners
	private ClickOpenProtocolButtonListener listenerOpenProtocolButton = null;
	private ClickRecoverProtocolButtonListener listenerRecoverProtocolButton = null;
	private ClickSelectProtocolBoxButtonListener listenerSelectProtocolBoxButton = null;
	private ClickSelectProtocolTypeButtonListener listenerSelectProtocolTypeButton = null;
	
	private BindingSource<DIRECTION> bsDIRECTION = new BindingSource<DIRECTION>(DIRECTION.class, 0);
	private BindingSource<BOX> bsBOX = new BindingSource<BOX>(BOX.class, 0);
	
	public enum BOX {
		IMPORT("BOX_IMPORT"),
		EXPORT("BOX_EXPORT");
		
		private String key;
		private String box;
		
		private BOX(String key) { 
			this.key = key;

		}

		public String getKey() {
			return this.key;
			
		}	
		
		public String getBox() {
			return this.box;
			
		}
		
		public void setBox(String box) {
			this.box = box;
			
		}
		
	}
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */	
	public ProtocolToolbar(I18N i18N, int position, final BindingSource<?> bindingSource, IViewContainer viewContainer) {
		super(position, bindingSource);
			
		buildMainLayout();

		// TODO add user code here
		this.position = position;
		this.viewContainer = viewContainer;
		ProtocolToolbar.i18N = i18N;
		
		// fill protocols type		
		setBindingSource(bindingSource);
		
		btnOpenProtocol.setDescription("Abrir protocolo");
		btnOpenProtocol.setDescription("Recuperar protocolo");
		
		// set reject button listener
		btnOpenProtocol.addListener(new ClickListener() {		
			public void buttonClick(ClickEvent event) {
				int index = bindingSource.getIndex();
				
				if (index == 0)
					return;
				
				Protocol protocolSelected = (Protocol) bindingSource.getItemId();
				
				if (listenerOpenProtocolButton != null)
					listenerOpenProtocolButton.openProtocolButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, protocolSelected, 0));					
				
			}
		});
		
		btnRecoverProtocol.addListener(new ClickListener() {			
			public void buttonClick(ClickEvent event) {
				int index = bindingSource.getIndex();
				
				if (index == 0)
					return;
				
				Protocol protocolSelected = (Protocol) bindingSource.getItemId();
				
				if (listenerRecoverProtocolButton != null)
					listenerRecoverProtocolButton.recoverProtocolButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, protocolSelected, 0));					
				
			}
		});

		cmbBoxProtocol.addListener(new ValueChangeListener() {			
			@Override
			public void valueChange(ValueChangeEvent event) {
				BOX protocolBoxSelected = (BOX) cmbBoxProtocol.getValue();
				
				if (listenerSelectProtocolBoxButton != null)
					listenerSelectProtocolBoxButton.selectProtocolBoxButtonClick(new ClickChangeEvent(protocolBoxSelected, 0));
				
			}
		});
		
		cmbTypeProtocol.addListener(new ValueChangeListener() {			
			@Override
			public void valueChange(ValueChangeEvent event) {
				DIRECTION protocolDirectionSelected = (DIRECTION) cmbTypeProtocol.getValue();
				
				if (listenerSelectProtocolTypeButton != null)
					listenerSelectProtocolTypeButton.selectProtocolTypeButtonClick(new ClickChangeEvent(protocolDirectionSelected, 0));
				
			}
		});
		
		loadData();
	}
	
	@Override
	public int getPosition() {
		return this.position;
		
	}

	@Override
	public ComponentContainer getContent() {
		return this.toolbarLayout;
		
	}
	
	public void addListenerOpenProtocolButton(ClickOpenProtocolButtonListener listener) {
		this.listenerOpenProtocolButton = listener;
		
	}
	public void addListenerRecoverProtocolButton(ClickRecoverProtocolButtonListener listener) {
		this.listenerRecoverProtocolButton = listener;
		
	}
	public void addListenerSelectProtocolBoxButton(ClickSelectProtocolBoxButtonListener listener) {
		this.listenerSelectProtocolBoxButton = listener;
		
	}	
	public void addListenerSelectProtocolTypeButton(ClickSelectProtocolTypeButtonListener listener) {
		this.listenerSelectProtocolTypeButton = listener;
		
	}
	
	public interface ClickOpenProtocolButtonListener extends Serializable {
        public void openProtocolButtonClick(ClickNavigationEvent event);

    }
	public interface ClickRecoverProtocolButtonListener extends Serializable {
        public void recoverProtocolButtonClick(ClickNavigationEvent event);

    }
	public interface ClickSelectProtocolBoxButtonListener extends Serializable {
		public void selectProtocolBoxButtonClick(ClickChangeEvent event);
		
	}	
	public interface ClickSelectProtocolTypeButtonListener extends Serializable {
		public void selectProtocolTypeButtonClick(ClickChangeEvent event);
		
	}
	
	public class ClickNavigationEvent extends ClickEvent {
		private int index;
		private Object register;
		
		public ClickNavigationEvent(Button button, Component source, MouseEventDetails details, Object register, int index) {
			button.super(source, details);
			
			this.index = index;
			this.register = register;
		}

		public int getIndex() {
			return this.index;
			
		}
		
		public Object getRegister() {
			return this.register;
			
		}
		
	}
	
	public class ClickChangeEvent implements Property.ValueChangeEvent {
		private int index;
		private Object register;
		
		public ClickChangeEvent(Object register, int index) {
			super();
			
			this.index = index;
			this.register = register;
		}

		public int getIndex() {
			return this.index;
			
		}
		
		public Object getRegister() {
			return this.register;
			
		}

		@Override
		public Property getProperty() {
			// TODO Auto-generated method stub
			return null;
		}
		
	}
	
	@Override
	public void setBindingSource(BindingSource<?> bindingSource) {
		this.bindingSource = bindingSource;
		
		// add change index binding source
		if (bindingSource != null) {
			bindingSource.addListenerToolBar((IndexChangeListener)this);
			
		}
		
	}
	
	@Override
	public void bindingSourceIndexChange(IndexChangeEvent event) {
		if (bindingSource != null) {
			Protocol protocolSelected = (Protocol)event.getRegister();
			
			if(protocolSelected == null)
				return;
		
			if (protocolSelected.getDirection().equals(Protocol.DIRECTION.IMPORT)) 
				btnRecoverProtocol.setEnabled(true);
			else
				btnRecoverProtocol.setEnabled(false);
		}
		
	}
	
	private void loadData() {
		cmbTypeProtocol.removeAllItems();
		for (DIRECTION direction : Arrays.asList(Protocol.DIRECTION.values())) {
			direction.setDirection(i18N.getMessage(direction.getKey()));
			bsDIRECTION.addItem(direction);
			
		}
		
		cmbTypeProtocol.setContainerDataSource(bsDIRECTION);
		
		cmbBoxProtocol.removeAllItems();
		for (BOX box : Arrays.asList(BOX.values())) {
			box.setBox(i18N.getMessage(box.getKey()));
			bsBOX.addItem(box);
			
		}
		
		cmbBoxProtocol.setContainerDataSource(bsBOX);		
	}
	
	@AutoGenerated
	private void buildMainLayout() {
		toolbarLayout = buildToolbarLayout();
		addComponent(toolbarLayout);
		
	}
	
	@AutoGenerated
	private HorizontalLayout buildToolbarLayout() {		
		toolbarLayout = new HorizontalLayout();
		toolbarLayout.setImmediate(false);
		toolbarLayout.setSpacing(true);
		
		ButtonGroup editionButtonGroup = new ButtonGroup();
		toolbarLayout.addComponent(editionButtonGroup);
		
		// btnOpenProtocol
		btnOpenProtocol = new Button();
		btnOpenProtocol.setCaption("Iniciar Job");
		btnOpenProtocol.setImmediate(true);
		btnOpenProtocol.setWidth("-1px");
		btnOpenProtocol.setHeight("-1px");
		btnOpenProtocol.setIcon(new ThemeResource("../konekti/images/icons/job-toolbar/bell--arrow.png"));
		
		editionButtonGroup.addButton(btnOpenProtocol);
		
		// btnRecoverProtocol
		btnRecoverProtocol = new Button();
		btnRecoverProtocol.setCaption("Iniciar Job");
		btnRecoverProtocol.setImmediate(true);
		btnRecoverProtocol.setWidth("-1px");
		btnRecoverProtocol.setHeight("-1px");
		btnRecoverProtocol.setIcon(new ThemeResource("../konekti/images/icons/job-toolbar/bell--arrow.png"));
		
		editionButtonGroup.addButton(btnRecoverProtocol);
		
		lblBoxProtocol = new Label("Buzón Protocolo:");
		lblBoxProtocol.setVisible(false);
		lblBoxProtocol.setWidth("-1px");
		lblBoxProtocol.setHeight("-1px");
		
		toolbarLayout.addComponent(lblBoxProtocol);
		
		cmbBoxProtocol = new ComboBox();
		cmbBoxProtocol.setVisible(false);
		cmbBoxProtocol.setImmediate(true);
		cmbBoxProtocol.setWidth("-1px");
		cmbBoxProtocol.setHeight("-1px");
		cmbBoxProtocol.setNullSelectionAllowed(false);
		cmbBoxProtocol.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		cmbBoxProtocol.setItemCaptionPropertyId("box");
		
		toolbarLayout.addComponent(cmbBoxProtocol);
		
		lblTypeProtocol = new Label("Tipo Protocolo:");
		lblTypeProtocol.setWidth("-1px");
		lblTypeProtocol.setHeight("-1px");
		
		toolbarLayout.addComponent(lblTypeProtocol);
		
		cmbTypeProtocol = new ComboBox();
		cmbTypeProtocol.setImmediate(true);
		cmbTypeProtocol.setWidth("-1px");
		cmbTypeProtocol.setHeight("-1px");
		cmbTypeProtocol.setNullSelectionAllowed(true);
		cmbTypeProtocol.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		cmbTypeProtocol.setItemCaptionPropertyId("direction");
		
		toolbarLayout.addComponent(cmbTypeProtocol);
		
		return toolbarLayout;
	}

	@Override
	protected void updateLabels() {
		btnOpenProtocol.setCaption(getI18N().getMessage("com.thingtrack.konekti.view.module.integracion.addon.ProtocolToolbar.btnOpenProtocol.caption"));
		btnRecoverProtocol.setCaption(getI18N().getMessage("com.thingtrack.konekti.view.module.integracion.addon.ProtocolToolbar.btnRecoverProtocol.caption"));
		//lblTypeProtocol.setCaption(getI18N().getMessage("com.thingtrack.konekti.view.module.integracion.addon.ProtocolToolbar.lblTypeProtocol.caption"));
	}
}
