package com.thingtrack.konekti.view.module.map.internal;

import java.util.ArrayList;
import java.util.List;

import org.vaadin.vol.Bounds;
import org.vaadin.vol.Control;
import org.vaadin.vol.GoogleSatelliteMapLayer;
import org.vaadin.vol.GoogleStreetMapLayer;
import org.vaadin.vol.Marker;
import org.vaadin.vol.MarkerLayer;
import org.vaadin.vol.OpenLayersMap;
import org.vaadin.vol.OpenStreetMapLayer;
import org.vaadin.vol.Point;
import org.vaadin.vol.Popup;
import org.vaadin.vol.Popup.CloseEvent;
import org.vaadin.vol.Popup.CloseListener;
import org.vaadin.vol.Popup.PopupStyle;

import com.thingtrack.konekti.domain.Location;
import com.thingtrack.konekti.domain.Organization;
import com.thingtrack.konekti.service.api.OrganizationService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.event.MouseEvents.ClickEvent;
import com.vaadin.event.MouseEvents.ClickListener;
import com.vaadin.terminal.Sizeable;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Accordion;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Label;
import com.vaadin.ui.Select;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class MapView extends AbstractView {

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private HorizontalSplitPanel mapSplitPanel;

	@AutoGenerated
	private VerticalLayout locationDataLayout;

	@AutoGenerated
	private Accordion locationDataAccordion;

	@AutoGenerated
	private VerticalLayout statistic4Layout;

	@AutoGenerated
	private VerticalLayout statistic3Layout;

	@AutoGenerated
	private VerticalLayout statistic2Layout;

	@AutoGenerated
	private VerticalLayout statistic1Layout;

	@AutoGenerated
	private HorizontalLayout locationDataToolLayout;

	@AutoGenerated
	private ComboBox cmbLocationField;

	@AutoGenerated
	private Label lblLocationData;

	@AutoGenerated
	private OpenLayersMap locationsLayersMap;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */	
	
	private Popup popup;
	
	private OrganizationService organizationService;
	
	private IViewContainer viewContainer;
	private IWorkbenchContext context;
	
	private GoogleSatelliteMapLayer googleSatelliteMapLayer;
	private GoogleStreetMapLayer googleStreetMapLayer;	
	private OpenStreetMapLayer openStreetMapLayer;
	private MarkerLayer markerMapLayer;
		
	private Organization organization;
		
	private BeanItemContainer<Location> bcLocation = new BindingSource<Location>(Location.class);
	
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 * @throws Exception 
	 * @throws IllegalArgumentException 
	 */
	public MapView(IWorkbenchContext context, IViewContainer viewContainer) throws IllegalArgumentException, Exception {
		this.context = context;
		
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		// set Slide View Services and ViewContainer to navigate		
		this.viewContainer = viewContainer;
		this.organizationService = MapViewContainer.getOrganizationService();
				
		// initialize datasource views
		initView();
		
		// load locations data
		loadData();
		
		// refresh location map
		refreshLocationMap();
		
	}

	private void initView() {
		// Set the position of the splitter as percentage
		mapSplitPanel.setSplitPosition(75, Sizeable.UNITS_PERCENTAGE);
		
		// configure open layers
		locationsLayersMap.setImmediate(true);				
		locationsLayersMap.getControls().clear();
		locationsLayersMap.addControl(Control.ZoomPanel);
		locationsLayersMap.addControl(Control.TouchNavigation);
		locationsLayersMap.addControl(Control.LayerSwitcher);
		locationsLayersMap.addControl(Control.ScaleLine);
		
		openStreetMapLayer = new OpenStreetMapLayer();
		googleStreetMapLayer = new GoogleStreetMapLayer();
        googleSatelliteMapLayer = new GoogleSatelliteMapLayer();
        
        locationsLayersMap.addLayer(googleStreetMapLayer);
        locationsLayersMap.addLayer(openStreetMapLayer);
        locationsLayersMap.addLayer(googleSatelliteMapLayer);
        
        markerMapLayer = new MarkerLayer();
        
        // get active user organization
        organization = context.getUser().getActiveOrganization();        
        
        // configure location combolist
        cmbLocationField.setNullSelectionAllowed(false);
        cmbLocationField.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
        cmbLocationField.setItemCaptionPropertyId("name");
        
	}

	private void loadData() throws IllegalArgumentException, Exception {
		bcLocation.removeAllItems();
		bcLocation.addAll(organization.getLocations());		
		
		cmbLocationField.setContainerDataSource(bcLocation);
		
		if (bcLocation.size() > 0)
			cmbLocationField.setValue(bcLocation.getIdByIndex(0));
	}
	
	private void refreshLocationMap() {
		markerMapLayer.removeAllComponents();
		
		for(final Location location : organization.getLocations()) {	
			// defining a new DevieHub Marker
	        final Marker markerLocation = new Marker(location.getLocationAddress().getLongitude(), location.getLocationAddress().getLatitude());
	        
	        // set of marker Icon for localition type
	        markerLocation.setIcon(new ThemeResource("images/icons/scheduler-module/marker.png"));
	        
	        markerLocation.setData(location);
	        
	        // add some server side integration when clicking a marker
	        markerLocation.addClickListener(new ClickListener() {
	            public void click(ClickEvent event) { 
	            	if (popup != null)
	            		locationsLayersMap.removeComponent(popup);
	            	
	            	popup = new Popup();
	            	popup.setLat(markerLocation.getLat());
	            	popup.setLon(markerLocation.getLon());
	            	
	            	VerticalLayout popupLayout = new VerticalLayout();
	            	popupLayout.setHeight("60px");
	            	popupLayout.setWidth("200px");
	            	//popupLayout.setSizeUndefined();
	            	//String message = getI18N().getMessage("popup.message", dh.getDescription(), dh.getComment(), installationDate, collectionDate);
	            	String message = "<b>Nom:</b> " + location.getName() +"<br><b>Adresse:</b> " + location.getLocationAddress().getStreet();
	            	Label lblMessage = new Label(message);
	            	lblMessage.setContentMode(Label.CONTENT_XHTML);
	            	popupLayout.addComponent(lblMessage);	            	
	            	popup.addComponent(popupLayout);
	            	
	            	// anchor the message to the device and show it
	                popup.setAnchor(markerLocation);
	                popup.setPopupStyle(PopupStyle.FRAMED_CLOUD);
	                popup.addListener(new CloseListener() {
	                    public void onClose(CloseEvent event) {
	                    	locationsLayersMap.removeComponent(popup);
	                    	
	                    }
	                });	                
	                
	                // add location geo popup
	                locationsLayersMap.addPopup(popup);
	                
	                // define location panel data
	                initializeLocationPanelData(location);
	            }
	        });
	    	    
	        // Add the marker to the marker Layer
	        markerMapLayer.addMarker(markerLocation);
	        
		}
		
		locationsLayersMap.removeLayer(markerMapLayer);
		locationsLayersMap.addLayer(markerMapLayer);
		
		// set maximun zoom possible for all markers painted
		setMaximunZoom();
	}
	
	private void initializeLocationPanelData(Location location) {
		cmbLocationField.setValue(location);		
		
	}
	
	private void setMaximunZoom() {
		List<Point> points = new ArrayList<Point>();		
		
		for(Location location : organization.getLocations())
			points.add(new Point(location.getLocationAddress().getLongitude(), location.getLocationAddress().getLatitude()));		
		
		// Extend the map to the current route		
		Bounds bounds = new Bounds(points.toArray(new Point[points.size()]));
		
		// set the maximun zoom for all points
		locationsLayersMap.zoomToExtent(bounds);
	}

	@Override
	protected void updateLabels() {		

		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// mapSplitPanel
		mapSplitPanel = buildMapSplitPanel();
		mainLayout.addComponent(mapSplitPanel);
		mainLayout.setExpandRatio(mapSplitPanel, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalSplitPanel buildMapSplitPanel() {
		// common part: create layout
		mapSplitPanel = new HorizontalSplitPanel();
		mapSplitPanel.setImmediate(false);
		mapSplitPanel.setWidth("100.0%");
		mapSplitPanel.setHeight("100.0%");
		mapSplitPanel.setMargin(false);
		
		// locationsLayersMap
		locationsLayersMap = new OpenLayersMap();
		locationsLayersMap.setImmediate(false);
		locationsLayersMap.setWidth("-1px");
		locationsLayersMap.setHeight("100.0%");
		mapSplitPanel.addComponent(locationsLayersMap);
		
		// locationDataLayout
		locationDataLayout = buildLocationDataLayout();
		mapSplitPanel.addComponent(locationDataLayout);
		
		return mapSplitPanel;
	}

	@AutoGenerated
	private VerticalLayout buildLocationDataLayout() {
		// common part: create layout
		locationDataLayout = new VerticalLayout();
		locationDataLayout.setImmediate(false);
		locationDataLayout.setWidth("100.0%");
		locationDataLayout.setHeight("100.0%");
		locationDataLayout.setMargin(false);
		
		// locationDataToolLayout
		locationDataToolLayout = buildLocationDataToolLayout();
		locationDataLayout.addComponent(locationDataToolLayout);
		
		// locationDataAccordion
		locationDataAccordion = buildLocationDataAccordion();
		locationDataLayout.addComponent(locationDataAccordion);
		locationDataLayout.setExpandRatio(locationDataAccordion, 1.0f);
		
		return locationDataLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildLocationDataToolLayout() {
		// common part: create layout
		locationDataToolLayout = new HorizontalLayout();
		locationDataToolLayout.setImmediate(false);
		locationDataToolLayout.setWidth("100.0%");
		locationDataToolLayout.setHeight("-1px");
		locationDataToolLayout.setMargin(false);
		
		// lblLocationData
		lblLocationData = new Label();
		lblLocationData.setImmediate(false);
		lblLocationData.setWidth("-1px");
		lblLocationData.setHeight("-1px");
		lblLocationData.setValue("Location:");
		locationDataToolLayout.addComponent(lblLocationData);
		
		// cmbLocationField
		cmbLocationField = new ComboBox();
		cmbLocationField.setImmediate(false);
		cmbLocationField.setWidth("100.0%");
		cmbLocationField.setHeight("-1px");
		locationDataToolLayout.addComponent(cmbLocationField);
		locationDataToolLayout.setExpandRatio(cmbLocationField, 1.0f);
		
		return locationDataToolLayout;
	}

	@AutoGenerated
	private Accordion buildLocationDataAccordion() {
		// common part: create layout
		locationDataAccordion = new Accordion();
		locationDataAccordion.setImmediate(true);
		locationDataAccordion.setWidth("100.0%");
		locationDataAccordion.setHeight("100.0%");
		
		// statistic1Layout
		statistic1Layout = new VerticalLayout();
		statistic1Layout.setImmediate(false);
		statistic1Layout.setWidth("100.0%");
		statistic1Layout.setHeight("100.0%");
		statistic1Layout.setMargin(false);
		locationDataAccordion.addTab(statistic1Layout, "Statistic 1", null);
		
		// statistic2Layout
		statistic2Layout = new VerticalLayout();
		statistic2Layout.setImmediate(false);
		statistic2Layout.setWidth("100.0%");
		statistic2Layout.setHeight("100.0%");
		statistic2Layout.setMargin(false);
		locationDataAccordion.addTab(statistic2Layout, "Statistic 2", null);
		
		// statistic3Layout
		statistic3Layout = new VerticalLayout();
		statistic3Layout.setImmediate(false);
		statistic3Layout.setWidth("100.0%");
		statistic3Layout.setHeight("100.0%");
		statistic3Layout.setMargin(false);
		locationDataAccordion.addTab(statistic3Layout, "Statistic 3", null);
		
		// statistic4Layout
		statistic4Layout = new VerticalLayout();
		statistic4Layout.setImmediate(false);
		statistic4Layout.setWidth("100.0%");
		statistic4Layout.setHeight("100.0%");
		statistic4Layout.setMargin(false);
		locationDataAccordion.addTab(statistic4Layout, "Statistic 4", null);
		
		return locationDataAccordion;
	}
	
}
