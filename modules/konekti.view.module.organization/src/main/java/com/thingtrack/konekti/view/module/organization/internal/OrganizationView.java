package com.thingtrack.konekti.view.module.organization.internal;

import java.util.Iterator;
import java.util.List;

import org.vaadin.dialogs.ConfirmDialog;

import com.lexaden.business.chart.OrganizationalChart;

import com.thingtrack.konekti.domain.Area;
import com.thingtrack.konekti.domain.Location;
import com.thingtrack.konekti.domain.Organization;
import com.thingtrack.konekti.service.api.AreaService;
import com.thingtrack.konekti.service.api.LocationService;
import com.thingtrack.konekti.service.api.OrganizationService;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.thingtrack.konekti.view.addon.ui.WindowDialog.DialogResult;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.thingtrack.konekti.view.module.organization.addon.OrganizationToolbar;
import com.thingtrack.konekti.view.module.organization.addon.OrganizationToolbar.ClickAddOrganizationButtonListener;
import com.thingtrack.konekti.view.module.organization.addon.OrganizationToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.module.organization.addon.OrganizationToolbar.ClickRefreshOrganizationButtonListener;
import com.thingtrack.konekti.view.web.form.AreaViewForm;
import com.thingtrack.konekti.view.web.form.LocationViewForm;
import com.thingtrack.konekti.view.web.form.OrganizationViewForm;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.HierarchicalContainer;
import com.vaadin.event.Action;
import com.vaadin.event.Action.Handler;
import com.vaadin.terminal.Resource;
import com.vaadin.terminal.Sizeable;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Component;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Select;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TabSheet.SelectedTabChangeListener;
import com.vaadin.ui.TabSheet.Tab;
import com.vaadin.ui.Tree;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.TabSheet.SelectedTabChangeEvent;

@SuppressWarnings("serial")
public class OrganizationView extends AbstractView 
	implements ClickAddOrganizationButtonListener, ClickRefreshOrganizationButtonListener, Handler {
			
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalSplitPanel horizontalSplitPanelOrganization;
	@AutoGenerated
	private TabSheet tabSheetOrganization;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private OrganizationService organizationService;
	private LocationService locationService;
	private AreaService areaService;
	
	private Organization organization;
	
	private List<Organization> organizations;
				
	private IViewContainer viewContainer;
	private IWorkbenchContext context;
		
	private OrganizationToolbar organizationToolbar;
	
	private static final int FIRST_TAB = 0;
	
	private static final Action ACTION_EDIT_ORGANIZATION = new Action("Editar Organización");
    private static final Action ACTION_DELETE_ORGANIZATION = new Action("Borrar Organización");
    
    private static final Action ACTION_ADD_LOCATION = new Action("Añadir Localización");
    private static final Action ACTION_EDIT_LOCATION= new Action("Editar Localización");
    private static final Action ACTION_DELETE_LOCATION = new Action("Borrar Localización");
    
    private static final Action ACTION_ADD_AREA = new Action("Añadir Area");
    private static final Action ACTION_EDIT_AREA = new Action("Editar Area");
    private static final Action ACTION_DELETE_AREA = new Action("Borrar Area");
    
    private static final Action[] ACTIONS_ORGANIZATION = new Action[] { ACTION_EDIT_ORGANIZATION, ACTION_DELETE_ORGANIZATION, ACTION_ADD_LOCATION };
    private static final Action[] ACTIONS_LOCATION = new Action[] { ACTION_EDIT_LOCATION, ACTION_DELETE_LOCATION, ACTION_ADD_AREA };
    private static final Action[] ACTIONS_AREA = new Action[] { ACTION_EDIT_AREA, ACTION_DELETE_AREA };
    
	private String selectedNode;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public OrganizationView(IWorkbenchContext context, IViewContainer viewContainer) {		
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here	
		this.context = context;
		
		// set Slide View Services and ViewContainer to navigate
		this.viewContainer = viewContainer;
		
		this.organizationService = OrganizationViewContainer.getOrganizationService();
		this.locationService = OrganizationViewContainer.getLocationService();
		this.areaService = OrganizationViewContainer.getAreaService();
		
		// initialize datasource views		
		initView();	
	}
	
	private void initView() {
		try {
			// get all organizations
			organizations = organizationService.getAll();

			if (organizations == null)
				return;
			
			// configure tabsheet listener
			tabSheetOrganization.addListener(new SelectedTabChangeListener() {				
				@Override
				public void selectedTabChange(SelectedTabChangeEvent event) {
					Tree treeSelected = (Tree) event.getTabSheet().getSelectedTab();
															
					organization = (Organization)treeSelected.getData();
										
					horizontalSplitPanelOrganization.setSecondComponent(createOrganizationOrganifram(organization));
					
				}
			});
			
			// fill tabsheet with all organizations
			for (Organization organization : organizations) {
				tabSheetOrganization.addTab(createOrganizationTree(organization), organization.getName());
				
				// initialize tabsheet with the first tab
				if (tabSheetOrganization.getComponentIterator().next() != null)
					tabSheetOrganization.setTabIndex(FIRST_TAB);	
			}
			
			// set Organization toolbar
			organizationToolbar = new OrganizationToolbar(0, null, viewContainer);
			organizationToolbar.addListenerRefreshOrganizationButton(this);
			organizationToolbar.addListenerAddOrganizationButton(this);
			removeAllToolbar();
			addToolbar(organizationToolbar);
			context.getToolbarManager().addToolbars(toolbars);
			
		} catch (Exception e) {
			throw new RuntimeException("¡Error al inicializar la organización!", e);
		}
		
	}
	
	private HierarchicalContainer createDataSource(Organization organization) {
		HierarchicalContainer container = new HierarchicalContainer();
		
		// A property that holds the caption is needed for ITEM_CAPTION_MODE_PROPERTY
        container.addContainerProperty("description", String.class, "");
        container.addContainerProperty("icon", Resource.class, null);
		
		// create the root node
		container.addItem(organization);
		container.getItem(organization).getItemProperty("description").setValue(organization.getName());
		container.getItem(organization).getItemProperty("icon").setValue(new ThemeResource("../konekti/images/icons/organization-module/building.png"));
		
		for (Location location : organization.getLocations()) {
			container.addItem(location);
			container.getItem(location).getItemProperty("description").setValue(location.getName());
			container.getItem(location).getItemProperty("icon").setValue(new ThemeResource("../konekti/images/icons/organization-module/marker.png"));
			container.setParent(location, organization);
			
			for (Area area : location.getAreas()) {
				container.addItem(area);
				container.getItem(area).getItemProperty("description").setValue(area.getName());
				container.getItem(area).getItemProperty("icon").setValue(new ThemeResource("../konekti/images/icons/organization-module/sitemap-application-blue.png"));
				container.setParent(area, location);
				container.setChildrenAllowed(area, false);
			}
		}
		
		return container;
		
	}
	
	private Tree createOrganizationTree(Organization organization) {		        
		Tree organizationTree = new Tree();	
		organizationTree.setImmediate(false);
		organizationTree.setWidth("100.0%");
		organizationTree.setHeight("100.0%");
		organizationTree.setContainerDataSource(createDataSource(organization));
		organizationTree.setItemIconPropertyId("icon");
		organizationTree.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		organizationTree.setItemCaptionPropertyId("description");
		
		// Expand all items that can be
        for (Object itemId: organizationTree.getItemIds())
        	organizationTree.expandItem(itemId);
        
        organizationTree.setData(organization);
        organizationTree.addActionHandler(this);
        
		return organizationTree;
	}
	
	private OrganizationalChart createOrganizationOrganifram(Organization organization) {
		OrganizationalChart organizationalChart = new OrganizationalChart();		
		organizationalChart.setImmediate(true);
		organizationalChart.setWidth("100.0%");
		organizationalChart.setHeight("100.0%");
		
		organizationalChart.setOption("size", "large");				
		organizationalChart.setOption("allowCollapse", false);
		
		organizationalChart.add(organization.getName(), "", organization.getSocialAddress().getStreet());
		
		for (Location location : organization.getLocations()) {
			organizationalChart.add(location.getName(), organization.getName(), location.getLocationAddress().getStreet());
			
			for (Area area : location.getAreas()) {
				organizationalChart.add(area.getName(), location.getName(), area.getDescription());
			}
		}
		
		organizationalChart.addListener(new OrganizationalChart.SelectionListener() {				
	        public void selectionChanged(List<String> selectedItems) {
	                /*if (selectedItems.size() > 0 && selectedItems.get(0).equalsIgnoreCase("")){                                                      
	                   getWindow().showNotification("Node : " + selectedNode + " deselected.");
	                } else {
	                        getWindow().showNotification("Node : " + selectedItems.get(0) + " selected.");
	                        selectedNode = selectedItems.get(0);
	                       
	                }*/
	                
	                if (selectedItems.size() > 0){ 
	                	getWindow().showNotification("Node : " + selectedItems.get(0) + " selected.");
	                	selectedNode = selectedItems.get(0);
	                }
	        }

        });
		
		return organizationalChart;
	}

	@Override
	public Action[] getActions(Object target, Object sender) {
		if ( target instanceof Organization)
			return ACTIONS_ORGANIZATION;
		else if ( target instanceof Location)
			return ACTIONS_LOCATION;
		else if ( target instanceof Area)
			return ACTIONS_AREA;
		else
			return null;
	}
	
	@Override
	public void handleAction(Action action, Object sender, Object target) {
		if (action == ACTION_EDIT_ORGANIZATION) {
			Tree tree = (Tree) sender;
			Organization organization = (Organization)target;
			
			editOrganization(tree, organization);
		}
		else if (action == ACTION_DELETE_ORGANIZATION) {
			Organization organization = (Organization)target;
			
			deleteOrganization(organization);			
		}
		else if (action == ACTION_ADD_LOCATION) {
			Tree tree = (Tree) sender;
			Location location = null;
			
			try {
				location = locationService.createEntity(organization);
			} catch (Exception e) {
				throw new RuntimeException("¡Error al crear entidad localizacion!", e);
			}
			
			addLocation(tree, location);
		}
		else if (action == ACTION_EDIT_LOCATION) {
			Tree tree = (Tree) sender;
			Location location = (Location)target;
			
			editLocation(tree, location);
		}
		else if (action == ACTION_DELETE_LOCATION) {
			Tree tree = (Tree) sender;
			Location location = (Location)target;
			
			deleteLocation(tree, location);	
		}
		else if (action == ACTION_ADD_AREA) {
			Tree tree = (Tree) sender;
			Location location = (Location)target;			
			Area area = null;
			
			try {
				area = areaService.createEntity(location);
			} catch (Exception e) {
				throw new RuntimeException("¡Error al crear entidad area!", e);
			}
			
			addArea(tree, area);
		}
		else if (action == ACTION_EDIT_AREA) {			 
			Tree tree = (Tree) sender;
			Area area = (Area)target;
			
			editArea(tree, area);
		}
		else if (action == ACTION_DELETE_AREA) {
			Tree tree = (Tree) sender;
			Area area = (Area)target;
			
			deleteArea(tree, area);
		}
		
	}

	@Override
	public void refreshOrganizationButtonClick(ClickNavigationEvent event) {
		try {			
			// get all organizations
			organizations = organizationService.getAll();

			if (organizations == null)
				return;
			
			// fill tabsheet with all organizations
			tabSheetOrganization.removeAllComponents();
			
			for (Organization organization : organizations) {
				tabSheetOrganization.addTab(createOrganizationTree(organization), organization.getName());
				
				// initialize tabsheet with the first tab
				if (tabSheetOrganization.getComponentIterator().next() != null)
					tabSheetOrganization.setTabIndex(FIRST_TAB);	
			}
		} catch (Exception e) {
			throw new RuntimeException("¡Error al inicializar la organización!", e);
		}
	}
	
	@Override
	public void addOrganizationButtonClick(ClickNavigationEvent event) {
		Organization organization;
		try {
			organization = organizationService.createEntity();
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo crear la nueva entidad Organización!", e);
			
		}		
		
		addOrganization(organization);
		
	}
	
	public void addOrganization(Organization organization) {		
		try {
			@SuppressWarnings("unused")
			WindowDialog<Organization> windowDialog = new WindowDialog<Organization>(getWindow(), "Nueva Organización", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new OrganizationViewForm(), organization, 
					new WindowDialog.CloseWindowDialogListener<Organization>() {
			    public void windowDialogClose(WindowDialog<Organization>.CloseWindowDialogEvent<Organization> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {
			    		// persist organization selected
			    		Organization savingOrganization = event.getDomainEntity();
			    		
			    		OrganizationView.this.organization = organizationService.save(savingOrganization);
			    		
			    		// add new organization to the active collection
			    		organizations.add(OrganizationView.this.organization);
			    		
			    		// add new tab organization
			    		tabSheetOrganization.addTab(createOrganizationTree(OrganizationView.this.organization), OrganizationView.this.organization.getName());
			    			    		
					} catch (Exception e) {
						e.printStackTrace();
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("¡No se pudo añadir la Organización!", e);			
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo añadir la Organización!", e);
		} 
		
	}
	
	public void editOrganization(final Tree tree, Organization organization) {										
		try {
			@SuppressWarnings("unused")
			WindowDialog<Organization> windowDialog = new WindowDialog<Organization>(getApplication().getMainWindow() , "Editor Organización", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new OrganizationViewForm(),organization, 
					new WindowDialog.CloseWindowDialogListener<Organization>() {
			    public void windowDialogClose(WindowDialog<Organization>.CloseWindowDialogEvent<Organization> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {
			    		
			    		// persist new organization
			    		Organization savingOrganization = event.getDomainEntity();			    		
			    		OrganizationView.this.organization = organizationService.save(savingOrganization);
			    		
			    		// refresh tree node updated
			    		tree.getContainerDataSource().getItem(OrganizationView.this.organization).getItemProperty("description").setValue(OrganizationView.this.organization.getName());			    		
			    		
			    		// refresh organization tab caption
			    		tabSheetOrganization.getSelectedTab().setCaption(OrganizationView.this.organization.getName());
			    					    		
			    		// refresh all organigram
			    		horizontalSplitPanelOrganization.setSecondComponent(createOrganizationOrganifram(OrganizationView.this.organization));
			    		
			    		
					} catch (Exception e) {
						throw new RuntimeException("¡No se pudo editar la Organización!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("¡No se pudo editar la Organización!", e);			
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo editar la Organización!", e);
		} 
		
	}
	
	public void deleteOrganization(final Organization organization) {		
		if (organization == null)
			return;
		
			ConfirmDialog.show(getWindow(), "Borrar Organización",
		        "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			// remove organization selected
		            			organizationService.delete(organization);
		            			organizations.remove(organization);
		            			
		            			// remove organization tab
		            			Tab tab = getTabByOrganization(organization);
		            				
		            			if (tab != null)
		            				tabSheetOrganization.removeTab(tab);	
		            			
		            		} catch (IllegalArgumentException e) {
		            			throw new RuntimeException("¡No se pudo borrar la Organización!", e);
		            		} catch (Exception e) {
		            			throw new RuntimeException("¡No se pudo borrar la Organización!", e);
		            		}
		                } 
		            }
		        });
		 
	}
		
	public void addLocation(final Tree tree, final Location location) {				
		try {
			@SuppressWarnings("unused")
			WindowDialog<Location> windowDialog = new WindowDialog<Location>(getWindow(), "Nueva Ubicación", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new LocationViewForm(), location, 
					new WindowDialog.CloseWindowDialogListener<Location>() {
			    public void windowDialogClose(WindowDialog<Location>.CloseWindowDialogEvent<Location> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {		
			    		// persist new location		
			    		Location savingLocation = event.getDomainEntity();			    		
			    		organization = organizationService.save(organization);			    		
			    		
			    		// refresh tree organization
			    		tree.setContainerDataSource(createDataSource(organization));		    		
	
			            for (Object itemId: tree.getItemIds())
			            	tree.expandItem(itemId);
			            						
			    		// refresh organigram
			    		horizontalSplitPanelOrganization.setSecondComponent(createOrganizationOrganifram(organization));			    		
			    					    		
					} catch (Exception e) {
						throw new RuntimeException("¡No se pudo borrar la Ubicación!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	public void editLocation(final Tree tree, final Location location) {
		try {
			@SuppressWarnings("unused")
			WindowDialog<Location> windowDialog = new WindowDialog<Location>(getApplication().getMainWindow() , "Editor Ubicación", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new LocationViewForm(), location, 
					new WindowDialog.CloseWindowDialogListener<Location>() {
			    public void windowDialogClose(WindowDialog<Location>.CloseWindowDialogEvent<Location> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {			    
			    		// persist location
			    		Location savingLocation = event.getDomainEntity();			    		
			    		organization = organizationService.save(organization);			    		
			    		
			    		// refresh tree organization
			    		tree.setContainerDataSource(createDataSource(organization));			    		
			    		
			    		for (Object itemId: tree.getItemIds())
			            	tree.expandItem(itemId);
			            			  
			    		// refresh all organigram
			    		horizontalSplitPanelOrganization.setSecondComponent(createOrganizationOrganifram(organization));
					} catch (Exception e) {
						throw new RuntimeException("¡No se pudo editar la Ubicación!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("¡No se pudo editar la Ubicación!", e);
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo editar la Ubicación!", e);
		} 
		
	}
	
	public void deleteLocation(final Tree tree, final Location location) {
		ConfirmDialog.show(getWindow(), "Borrar Ubicación",
		        "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			// delete from data
		            			organization.removeLocation(location);		            			
		            			organization = organizationService.save(organization);
		            			
		            			locationService.delete(location);
		            			
		            			// refresh tree organization															
					    		tree.setContainerDataSource(createDataSource(organization));			    		
					    		
					    		for (Object itemId: tree.getItemIds())
					            	tree.expandItem(itemId);
					    		
					    		// refresh organigram
					    		horizontalSplitPanelOrganization.setSecondComponent(createOrganizationOrganifram(organization));							
		            		} catch (IllegalArgumentException e) {
		            			throw new RuntimeException("¡No se pudo borrar la Ubicación!", e);
		            		} catch (Exception e) {
		            			throw new RuntimeException("¡No se pudo borrar la Ubicación!", e);
		            		}
		                } 
		            }
		        });
		
	}
	
	public void addArea(final Tree tree, Area area) {		
		try {
			@SuppressWarnings("unused")
			WindowDialog<Area> windowDialog = new WindowDialog<Area>(getWindow(), "Nueva Almacén", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new AreaViewForm(), area, 
					new WindowDialog.CloseWindowDialogListener<Area>() {
			    public void windowDialogClose(WindowDialog<Area>.CloseWindowDialogEvent<Area> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;

			    	try {	
			    		// persist new location		
			    		Area savingArea = event.getDomainEntity();			    		
			    		organization = organizationService.save(organization);			    		
			    		
			    		// refresh tree organization
			    		tree.setContainerDataSource(createDataSource(organization));		    		
	
			            for (Object itemId: tree.getItemIds())
			            	tree.expandItem(itemId);
			            						
			    		// refresh organigram
			    		horizontalSplitPanelOrganization.setSecondComponent(createOrganizationOrganifram(organization));	
			    		
					} catch (Exception e) {
						throw new RuntimeException("¡No se pudo crear el Area!", e);

					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("¡No se pudo crear el Area!", e);
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo crear el Area!", e);
		}

	}
	
	public void editArea(final Tree tree, Area area) {
		try {
			@SuppressWarnings("unused")
			WindowDialog<Area> windowDialog = new WindowDialog<Area>(getWindow(), "Editor Area", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new AreaViewForm(), area, 
					new WindowDialog.CloseWindowDialogListener<Area>() {
			    public void windowDialogClose(WindowDialog<Area>.CloseWindowDialogEvent<Area> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;

			    	try {	
			    		// persist area
			    		Area savingArea = event.getDomainEntity();			    		
			    		organization = organizationService.save(organization);			    		
			    		
			    		// refresh tree organization
			    		tree.setContainerDataSource(createDataSource(organization));			    		
			    		
			    		for (Object itemId: tree.getItemIds())
			            	tree.expandItem(itemId);
			            			  
			    		// refresh all organigram
			    		horizontalSplitPanelOrganization.setSecondComponent(createOrganizationOrganifram(organization));
			    		
					} catch (Exception e) {
						throw new RuntimeException("¡No se pudo editar el Area!", e);
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("¡No se pudo editar el Area!", e);
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo editar el Area!", e);
		}
		
	}
	
	public void deleteArea(final Tree tree, final Area area) {
		ConfirmDialog.show(getWindow(), "Borrar Area",
		        "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			// delete from data
		            			area.getLocation().removeArea(area);		            					            					            			
		            			organization = organizationService.save(organization);
		            			
		            			areaService.delete(area);
		            			
		            			// refresh tree organization															
					    		tree.setContainerDataSource(createDataSource(organization));			    		
					    		
					    		for (Object itemId: tree.getItemIds())
					            	tree.expandItem(itemId);
					    		
					    		// refresh organigram
					    		horizontalSplitPanelOrganization.setSecondComponent(createOrganizationOrganifram(organization));
		            		} catch (IllegalArgumentException e) {
		            			throw new RuntimeException("¡No se pudo borrar el Area!", e);
		            		} catch (Exception e) {
		            			throw new RuntimeException("¡No se pudo borrar el Area!", e);
		            		}
		                } 
		            }
		        });

	}
	
	private Tab getTabByOrganization(Organization organization) {
		@SuppressWarnings("rawtypes")
		Iterator itr = tabSheetOrganization.getComponentIterator();
		
		while(itr.hasNext()) {
		    Component cmp = (Component) itr.next();
		    Tree treeSelected = (Tree) cmp;
		    Organization organizationSelected = (Organization)treeSelected.getData();
		    
		    if (organizationSelected.equals(organization))
		    	return tabSheetOrganization.getTab(cmp);
		    
		} 

		return null;
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// horizontalSplitPanelOrganization
		horizontalSplitPanelOrganization = buildHorizontalSplitPanelOrganization();
		mainLayout.addComponent(horizontalSplitPanelOrganization);
		mainLayout.setExpandRatio(horizontalSplitPanelOrganization, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalSplitPanel buildHorizontalSplitPanelOrganization() {
		// common part: create layout
		horizontalSplitPanelOrganization = new HorizontalSplitPanel();
		horizontalSplitPanelOrganization.setSplitPosition(25, Sizeable.UNITS_PERCENTAGE);
		horizontalSplitPanelOrganization.setImmediate(false);
		horizontalSplitPanelOrganization.setWidth("100.0%");
		horizontalSplitPanelOrganization.setHeight("100.0%");
		horizontalSplitPanelOrganization.setMargin(false);
		
		// tabSheetOrganization		
		tabSheetOrganization = new TabSheet();		
		tabSheetOrganization.setImmediate(true);
		tabSheetOrganization.setWidth("100.0%");
		tabSheetOrganization.setHeight("100.0%");
		horizontalSplitPanelOrganization.addComponent(tabSheetOrganization);
		
		return horizontalSplitPanelOrganization;
	}

	@Override
	protected void updateLabels() {
		// TODO Auto-generated method stub
		
	}

}
